{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  ({
    flags = {
      support_aesni = true;
      support_rdrand = true;
      support_pclmuldq = false;
      support_sse = false;
      integer-gmp = true;
      support_deepseq = true;
      old_toolchain_inliner = false;
      check_alignment = false;
      use_target_attributes = true;
      };
    package = {
      specVersion = "1.18";
      identifier = { name = "cryptonite"; version = "0.29"; };
      license = "BSD-3-Clause";
      copyright = "Vincent Hanquez <vincent@snarc.org>";
      maintainer = "vincent@snarc.org";
      author = "Vincent Hanquez <vincent@snarc.org>";
      homepage = "https://github.com/haskell-crypto/cryptonite";
      url = "";
      synopsis = "Cryptography Primitives sink";
      description = "A repository of cryptographic primitives.\n\n* Symmetric ciphers: AES, DES, 3DES, CAST5, Blowfish, Twofish, Camellia, RC4, Salsa, XSalsa, ChaCha.\n\n* Hash: SHA1, SHA2, SHA3, SHAKE, MD2, MD4, MD5, Keccak, Skein, Ripemd, Tiger, Whirlpool, Blake2\n\n* MAC: HMAC, KMAC, Poly1305\n\n* Asymmetric crypto: DSA, RSA, DH, ECDH, ECDSA, ECC, Curve25519, Curve448, Ed25519, Ed448\n\n* Key Derivation Function: PBKDF2, Scrypt, HKDF, Argon2, BCrypt, BCryptPBKDF\n\n* Cryptographic Random generation: System Entropy, Deterministic Random Generator\n\n* Data related: Anti-Forensic Information Splitter (AFIS)\n\nIf anything cryptographic related is missing from here, submit\na pull request to have it added. This package strives to be a\ncryptographic kitchen sink that provides cryptography for everyone.\n\nEvaluate the security related to your requirements before using.\n\nRead \"Crypto.Tutorial\" for a quick start guide.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = ((([
          (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
          (hsPkgs."memory" or (errorHandler.buildDepError "memory"))
          (hsPkgs."basement" or (errorHandler.buildDepError "basement"))
          (hsPkgs."ghc-prim" or (errorHandler.buildDepError "ghc-prim"))
          ] ++ (pkgs.lib).optional (!(compiler.isGhc && (compiler.version).lt "8.0")) (hsPkgs."base" or (errorHandler.buildDepError "base"))) ++ (pkgs.lib).optional (system.isWindows) (hsPkgs."Win32" or (errorHandler.buildDepError "Win32"))) ++ (pkgs.lib).optional (compiler.isGhc && true && flags.integer-gmp) (hsPkgs."integer-gmp" or (errorHandler.buildDepError "integer-gmp"))) ++ (pkgs.lib).optional (flags.support_deepseq) (hsPkgs."deepseq" or (errorHandler.buildDepError "deepseq"));
        libs = (pkgs.lib).optional (system.isLinux) (pkgs."pthread" or (errorHandler.sysDepError "pthread")) ++ (pkgs.lib).optional (system.isWindows) (pkgs."advapi32" or (errorHandler.sysDepError "advapi32"));
        buildable = if compiler.isGhc && (compiler.version).lt "8.0"
          then false
          else true;
        };
      tests = {
        "test-cryptonite" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
            (hsPkgs."memory" or (errorHandler.buildDepError "memory"))
            (hsPkgs."tasty" or (errorHandler.buildDepError "tasty"))
            (hsPkgs."tasty-quickcheck" or (errorHandler.buildDepError "tasty-quickcheck"))
            (hsPkgs."tasty-hunit" or (errorHandler.buildDepError "tasty-hunit"))
            (hsPkgs."tasty-kat" or (errorHandler.buildDepError "tasty-kat"))
            (hsPkgs."cryptonite" or (errorHandler.buildDepError "cryptonite"))
            ];
          buildable = true;
          };
        };
      benchmarks = {
        "bench-cryptonite" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
            (hsPkgs."deepseq" or (errorHandler.buildDepError "deepseq"))
            (hsPkgs."memory" or (errorHandler.buildDepError "memory"))
            (hsPkgs."gauge" or (errorHandler.buildDepError "gauge"))
            (hsPkgs."random" or (errorHandler.buildDepError "random"))
            (hsPkgs."cryptonite" or (errorHandler.buildDepError "cryptonite"))
            ];
          buildable = true;
          };
        };
      };
    } // {
    src = (pkgs.lib).mkDefault (pkgs.fetchurl {
      url = "http://hackage.haskell.org/package/cryptonite-0.29.tar.gz";
      sha256 = "d83a021cdaae90f3734b725a03ac7b555e999809779ec197011d2da8e1b8b08f";
      });
    }) // {
    package-description-override = "Name:                cryptonite\r\nversion:             0.29\r\nx-revision: 1\r\nSynopsis:            Cryptography Primitives sink\r\nDescription:\r\n    A repository of cryptographic primitives.\r\n    .\r\n    * Symmetric ciphers: AES, DES, 3DES, CAST5, Blowfish, Twofish, Camellia, RC4, Salsa, XSalsa, ChaCha.\r\n    .\r\n    * Hash: SHA1, SHA2, SHA3, SHAKE, MD2, MD4, MD5, Keccak, Skein, Ripemd, Tiger, Whirlpool, Blake2\r\n    .\r\n    * MAC: HMAC, KMAC, Poly1305\r\n    .\r\n    * Asymmetric crypto: DSA, RSA, DH, ECDH, ECDSA, ECC, Curve25519, Curve448, Ed25519, Ed448\r\n    .\r\n    * Key Derivation Function: PBKDF2, Scrypt, HKDF, Argon2, BCrypt, BCryptPBKDF\r\n    .\r\n    * Cryptographic Random generation: System Entropy, Deterministic Random Generator\r\n    .\r\n    * Data related: Anti-Forensic Information Splitter (AFIS)\r\n    .\r\n    If anything cryptographic related is missing from here, submit\r\n    a pull request to have it added. This package strives to be a\r\n    cryptographic kitchen sink that provides cryptography for everyone.\r\n    .\r\n    Evaluate the security related to your requirements before using.\r\n    .\r\n    Read \"Crypto.Tutorial\" for a quick start guide.\r\nLicense:             BSD3\r\nLicense-file:        LICENSE\r\nCopyright:           Vincent Hanquez <vincent@snarc.org>\r\nAuthor:              Vincent Hanquez <vincent@snarc.org>\r\nMaintainer:          vincent@snarc.org\r\nCategory:            Cryptography\r\nStability:           experimental\r\nBuild-Type:          Simple\r\nHomepage:            https://github.com/haskell-crypto/cryptonite\r\nBug-reports:         https://github.com/haskell-crypto/cryptonite/issues\r\nCabal-Version:       1.18\r\ntested-with:         GHC==8.8.2, GHC==8.6.5, GHC==8.4.4, GHC==8.2.2, GHC==8.0.2\r\nextra-doc-files:     README.md CHANGELOG.md\r\nextra-source-files:  cbits/*.h\r\n                     cbits/aes/*.h\r\n                     cbits/ed25519/*.h\r\n                     cbits/decaf/include/*.h\r\n                     cbits/decaf/include/decaf/*.h\r\n                     cbits/decaf/include/arch_32/*.h\r\n                     cbits/decaf/include/arch_ref64/*.h\r\n                     cbits/decaf/p448/arch_32/*.h\r\n                     cbits/decaf/p448/arch_ref64/*.h\r\n                     cbits/decaf/p448/*.h\r\n                     cbits/decaf/ed448goldilocks/decaf_tables.c\r\n                     cbits/decaf/ed448goldilocks/decaf.c\r\n                     cbits/include32/p256/*.h\r\n                     cbits/include64/p256/*.h\r\n                     cbits/blake2/ref/*.h\r\n                     cbits/blake2/sse/*.h\r\n                     cbits/argon2/*.h\r\n                     cbits/argon2/*.c\r\n                     cbits/aes/x86ni_impl.c\r\n                     cbits/cryptonite_hash_prefix.c\r\n                     tests/*.hs\r\n\r\nsource-repository head\r\n  type: git\r\n  location: https://github.com/haskell-crypto/cryptonite\r\n\r\nFlag support_aesni\r\n  Description:       allow compilation with AESNI on system and architecture that supports it\r\n  Default:           True\r\n  Manual:            True\r\n\r\nFlag support_rdrand\r\n  Description:       allow compilation with RDRAND on system and architecture that supports it\r\n  Default:           True\r\n  Manual:            True\r\n\r\nFlag support_pclmuldq\r\n  Description:       Allow compilation with pclmuldq on architecture that supports it\r\n  Default:           False\r\n  Manual:            True\r\n\r\nFlag support_sse\r\n  Description:       Use SSE optimized version of (BLAKE2, ARGON2)\r\n  Default:           False\r\n  Manual:            True\r\n\r\nFlag integer-gmp\r\n  Description:       Whether or not to use GMP for some functions\r\n  Default:           True\r\n  Manual:            True\r\n\r\nFlag support_deepseq\r\n  Description:       add deepseq instances for cryptographic types\r\n  Default:           True\r\n  Manual:            True\r\n\r\nFlag old_toolchain_inliner\r\n  Description:       use -fgnu89-inline to workaround an old compiler / linker / glibc issue.\r\n  Default:           False\r\n  Manual:            True\r\n\r\nFlag check_alignment\r\n  Description:       extra check on alignment in C layers, which cause lowlevel assert errors. for debugging only.\r\n  Default:           False\r\n  Manual:            True\r\n\r\nFlag use_target_attributes\r\n  Description:       use GCC / clang function attributes instead of global target options.\r\n  Default:           True\r\n  Manual:            True\r\n\r\nLibrary\r\n  Exposed-modules:   Crypto.Cipher.AES\r\n                     Crypto.Cipher.AESGCMSIV\r\n                     Crypto.Cipher.Blowfish\r\n                     Crypto.Cipher.CAST5\r\n                     Crypto.Cipher.Camellia\r\n                     Crypto.Cipher.ChaCha\r\n                     Crypto.Cipher.ChaChaPoly1305\r\n                     Crypto.Cipher.DES\r\n                     Crypto.Cipher.RC4\r\n                     Crypto.Cipher.Salsa\r\n                     Crypto.Cipher.TripleDES\r\n                     Crypto.Cipher.Twofish\r\n                     Crypto.Cipher.Types\r\n                     Crypto.Cipher.Utils\r\n                     Crypto.Cipher.XSalsa\r\n                     Crypto.ConstructHash.MiyaguchiPreneel\r\n                     Crypto.Data.AFIS\r\n                     Crypto.Data.Padding\r\n                     Crypto.ECC\r\n                     Crypto.ECC.Edwards25519\r\n                     Crypto.Error\r\n                     Crypto.MAC.CMAC\r\n                     Crypto.MAC.Poly1305\r\n                     Crypto.MAC.HMAC\r\n                     Crypto.MAC.KMAC\r\n                     Crypto.Number.Basic\r\n                     Crypto.Number.F2m\r\n                     Crypto.Number.Generate\r\n                     Crypto.Number.ModArithmetic\r\n                     Crypto.Number.Nat\r\n                     Crypto.Number.Prime\r\n                     Crypto.Number.Serialize\r\n                     Crypto.Number.Serialize.LE\r\n                     Crypto.Number.Serialize.Internal\r\n                     Crypto.Number.Serialize.Internal.LE\r\n                     Crypto.KDF.Argon2\r\n                     Crypto.KDF.PBKDF2\r\n                     Crypto.KDF.Scrypt\r\n                     Crypto.KDF.BCrypt\r\n                     Crypto.KDF.BCryptPBKDF\r\n                     Crypto.KDF.HKDF\r\n                     Crypto.Hash\r\n                     Crypto.Hash.IO\r\n                     Crypto.Hash.Algorithms\r\n                     Crypto.OTP\r\n                     Crypto.PubKey.Curve25519\r\n                     Crypto.PubKey.Curve448\r\n                     Crypto.PubKey.MaskGenFunction\r\n                     Crypto.PubKey.DH\r\n                     Crypto.PubKey.DSA\r\n                     Crypto.PubKey.ECC.Generate\r\n                     Crypto.PubKey.ECC.Prim\r\n                     Crypto.PubKey.ECC.DH\r\n                     Crypto.PubKey.ECC.ECDSA\r\n                     Crypto.PubKey.ECC.P256\r\n                     Crypto.PubKey.ECC.Types\r\n                     Crypto.PubKey.ECDSA\r\n                     Crypto.PubKey.ECIES\r\n                     Crypto.PubKey.Ed25519\r\n                     Crypto.PubKey.Ed448\r\n                     Crypto.PubKey.EdDSA\r\n                     Crypto.PubKey.RSA\r\n                     Crypto.PubKey.RSA.PKCS15\r\n                     Crypto.PubKey.RSA.Prim\r\n                     Crypto.PubKey.RSA.PSS\r\n                     Crypto.PubKey.RSA.OAEP\r\n                     Crypto.PubKey.RSA.Types\r\n                     Crypto.PubKey.Rabin.OAEP\r\n                     Crypto.PubKey.Rabin.Basic\r\n                     Crypto.PubKey.Rabin.Modified\r\n                     Crypto.PubKey.Rabin.RW\r\n                     Crypto.PubKey.Rabin.Types\r\n                     Crypto.Random\r\n                     Crypto.Random.Types\r\n                     Crypto.Random.Entropy\r\n                     Crypto.Random.EntropyPool\r\n                     Crypto.Random.Entropy.Unsafe\r\n                     Crypto.System.CPU\r\n                     Crypto.Tutorial\r\n  Other-modules:     Crypto.Cipher.AES.Primitive\r\n                     Crypto.Cipher.Blowfish.Box\r\n                     Crypto.Cipher.Blowfish.Primitive\r\n                     Crypto.Cipher.CAST5.Primitive\r\n                     Crypto.Cipher.Camellia.Primitive\r\n                     Crypto.Cipher.DES.Primitive\r\n                     Crypto.Cipher.Twofish.Primitive\r\n                     Crypto.Cipher.Types.AEAD\r\n                     Crypto.Cipher.Types.Base\r\n                     Crypto.Cipher.Types.Block\r\n                     Crypto.Cipher.Types.GF\r\n                     Crypto.Cipher.Types.Stream\r\n                     Crypto.Cipher.Types.Utils\r\n                     Crypto.Error.Types\r\n                     Crypto.Number.Compat\r\n                     Crypto.Hash.Types\r\n                     Crypto.Hash.Blake2\r\n                     Crypto.Hash.Blake2s\r\n                     Crypto.Hash.Blake2sp\r\n                     Crypto.Hash.Blake2b\r\n                     Crypto.Hash.Blake2bp\r\n                     Crypto.Hash.SHA1\r\n                     Crypto.Hash.SHA224\r\n                     Crypto.Hash.SHA256\r\n                     Crypto.Hash.SHA384\r\n                     Crypto.Hash.SHA512\r\n                     Crypto.Hash.SHA512t\r\n                     Crypto.Hash.SHA3\r\n                     Crypto.Hash.SHAKE\r\n                     Crypto.Hash.Keccak\r\n                     Crypto.Hash.MD2\r\n                     Crypto.Hash.MD4\r\n                     Crypto.Hash.MD5\r\n                     Crypto.Hash.RIPEMD160\r\n                     Crypto.Hash.Skein256\r\n                     Crypto.Hash.Skein512\r\n                     Crypto.Hash.Tiger\r\n                     Crypto.Hash.Whirlpool\r\n                     Crypto.Random.Entropy.Source\r\n                     Crypto.Random.Entropy.Backend\r\n                     Crypto.Random.ChaChaDRG\r\n                     Crypto.Random.SystemDRG\r\n                     Crypto.Random.Probabilistic\r\n                     Crypto.PubKey.Internal\r\n                     Crypto.PubKey.ElGamal\r\n                     Crypto.ECC.Simple.Types\r\n                     Crypto.ECC.Simple.Prim\r\n                     Crypto.Internal.Builder\r\n                     Crypto.Internal.ByteArray\r\n                     Crypto.Internal.Compat\r\n                     Crypto.Internal.CompatPrim\r\n                     Crypto.Internal.DeepSeq\r\n                     Crypto.Internal.Imports\r\n                     Crypto.Internal.Nat\r\n                     Crypto.Internal.Words\r\n                     Crypto.Internal.WordArray\r\n  if impl(ghc < 8.0)\r\n    Buildable: False\r\n  else\r\n    Build-depends:   base < 4.16\r\n\r\n  Build-depends:     bytestring\r\n                   , memory >= 0.14.18\r\n                   , basement >= 0.0.6\r\n                   , ghc-prim\r\n  ghc-options:       -Wall -fwarn-tabs -optc-O3\r\n  if os(linux)\r\n    extra-libraries: pthread\r\n  default-language:  Haskell2010\r\n  cc-options:        -std=gnu99\r\n  if flag(old_toolchain_inliner)\r\n    cc-options:      -fgnu89-inline\r\n  C-sources:         cbits/cryptonite_chacha.c\r\n                   , cbits/cryptonite_salsa.c\r\n                   , cbits/cryptonite_xsalsa.c\r\n                   , cbits/cryptonite_rc4.c\r\n                   , cbits/cryptonite_cpu.c\r\n                   , cbits/p256/p256.c\r\n                   , cbits/p256/p256_ec.c\r\n                   , cbits/cryptonite_blake2s.c\r\n                   , cbits/cryptonite_blake2sp.c\r\n                   , cbits/cryptonite_blake2b.c\r\n                   , cbits/cryptonite_blake2bp.c\r\n                   , cbits/cryptonite_poly1305.c\r\n                   , cbits/cryptonite_sha1.c\r\n                   , cbits/cryptonite_sha256.c\r\n                   , cbits/cryptonite_sha512.c\r\n                   , cbits/cryptonite_sha3.c\r\n                   , cbits/cryptonite_md2.c\r\n                   , cbits/cryptonite_md4.c\r\n                   , cbits/cryptonite_md5.c\r\n                   , cbits/cryptonite_ripemd.c\r\n                   , cbits/cryptonite_skein256.c\r\n                   , cbits/cryptonite_skein512.c\r\n                   , cbits/cryptonite_tiger.c\r\n                   , cbits/cryptonite_whirlpool.c\r\n                   , cbits/cryptonite_scrypt.c\r\n                   , cbits/cryptonite_pbkdf2.c\r\n                   , cbits/ed25519/ed25519.c\r\n  include-dirs:      cbits\r\n                   , cbits/ed25519\r\n                   , cbits/decaf/include\r\n                   , cbits/decaf/p448\r\n\r\n  if arch(x86_64) || arch(aarch64)\r\n    include-dirs:      cbits/include64\r\n  else\r\n    include-dirs:      cbits/include32\r\n\r\n  if arch(x86_64) || arch(aarch64)\r\n    C-sources:         cbits/decaf/p448/arch_ref64/f_impl.c\r\n                     , cbits/decaf/p448/f_generic.c\r\n                     , cbits/decaf/p448/f_arithmetic.c\r\n                     , cbits/decaf/utils.c\r\n                     , cbits/decaf/ed448goldilocks/scalar.c\r\n                     , cbits/decaf/ed448goldilocks/decaf_all.c\r\n                     , cbits/decaf/ed448goldilocks/eddsa.c\r\n\r\n    include-dirs:      cbits/decaf/include/arch_ref64\r\n                     , cbits/decaf/p448/arch_ref64\r\n  else\r\n    C-sources:         cbits/decaf/p448/arch_32/f_impl.c\r\n                     , cbits/decaf/p448/f_generic.c\r\n                     , cbits/decaf/p448/f_arithmetic.c\r\n                     , cbits/decaf/utils.c\r\n                     , cbits/decaf/ed448goldilocks/scalar.c\r\n                     , cbits/decaf/ed448goldilocks/decaf_all.c\r\n                     , cbits/decaf/ed448goldilocks/eddsa.c\r\n\r\n    include-dirs:      cbits/decaf/include/arch_32\r\n                     , cbits/decaf/p448/arch_32\r\n\r\n  if arch(x86_64) || arch(aarch64)\r\n    C-sources: cbits/curve25519/curve25519-donna-c64.c\r\n  else\r\n    C-sources: cbits/curve25519/curve25519-donna.c\r\n\r\n  -- FIXME armel or mispel is also little endian.\r\n  -- might be a good idea to also add a runtime autodetect mode.\r\n  -- ARCH_ENDIAN_UNKNOWN\r\n  if (arch(i386) || arch(x86_64))\r\n    CPP-options: -DARCH_IS_LITTLE_ENDIAN\r\n\r\n  if arch(i386)\r\n    CPP-options: -DARCH_X86\r\n\r\n  if arch(x86_64)\r\n    CPP-options: -DARCH_X86_64\r\n\r\n  if flag(support_rdrand) && (arch(i386) || arch(x86_64)) && !os(windows)\r\n    CPP-options:    -DSUPPORT_RDRAND\r\n    Other-modules:  Crypto.Random.Entropy.RDRand\r\n    c-sources:      cbits/cryptonite_rdrand.c\r\n\r\n  if flag(support_aesni) && (os(linux) || os(freebsd) || os(osx)) && (arch(i386) || arch(x86_64))\r\n    CC-options:     -DWITH_AESNI\r\n    if !flag(use_target_attributes)\r\n      CC-options:     -mssse3 -maes\r\n    if flag(support_pclmuldq)\r\n      CC-options:   -DWITH_PCLMUL\r\n      if !flag(use_target_attributes)\r\n        CC-options:     -msse4.1 -mpclmul\r\n    C-sources:       cbits/aes/x86ni.c\r\n                   , cbits/aes/generic.c\r\n                   , cbits/aes/gf.c\r\n                   , cbits/cryptonite_aes.c\r\n  else\r\n    C-sources:       cbits/aes/generic.c\r\n                   , cbits/aes/gf.c\r\n                   , cbits/cryptonite_aes.c\r\n\r\n  if arch(x86_64) || flag(support_sse)\r\n    C-sources:      cbits/blake2/sse/blake2s.c\r\n                  , cbits/blake2/sse/blake2sp.c\r\n                  , cbits/blake2/sse/blake2b.c\r\n                  , cbits/blake2/sse/blake2bp.c\r\n    include-dirs: cbits/blake2/sse\r\n  else\r\n    C-sources:      cbits/blake2/ref/blake2s-ref.c\r\n                  , cbits/blake2/ref/blake2sp-ref.c\r\n                  , cbits/blake2/ref/blake2b-ref.c\r\n                  , cbits/blake2/ref/blake2bp-ref.c\r\n    include-dirs: cbits/blake2/ref\r\n\r\n  if arch(x86_64) || flag(support_sse)\r\n    CPP-options:    -DSUPPORT_SSE\r\n    if arch(i386)\r\n      CC-options:   -msse2\r\n\r\n  C-sources:      cbits/argon2/argon2.c\r\n  include-dirs:   cbits/argon2\r\n\r\n  if os(windows)\r\n    cpp-options:    -DWINDOWS\r\n    Build-Depends:  Win32\r\n    Other-modules:  Crypto.Random.Entropy.Windows\r\n    extra-libraries: advapi32\r\n  else\r\n    Other-modules:  Crypto.Random.Entropy.Unix\r\n\r\n  if impl(ghc) && flag(integer-gmp)\r\n    Build-depends:   integer-gmp\r\n\r\n  if flag(support_deepseq)\r\n    CPP-options:     -DWITH_DEEPSEQ_SUPPORT\r\n    Build-depends:   deepseq\r\n  if flag(check_alignment)\r\n    cc-options:     -DWITH_ASSERT_ALIGNMENT\r\n  if flag(use_target_attributes)\r\n    cc-options:     -DWITH_TARGET_ATTRIBUTES\r\n\r\nTest-Suite test-cryptonite\r\n  type:              exitcode-stdio-1.0\r\n  hs-source-dirs:    tests\r\n  Main-is:           Tests.hs\r\n  Other-modules:     BlockCipher\r\n                     ChaCha\r\n                     BCrypt\r\n                     BCryptPBKDF\r\n                     ECC\r\n                     ECC.Edwards25519\r\n                     ECDSA\r\n                     Hash\r\n                     Imports\r\n                     KAT_AES.KATCBC\r\n                     KAT_AES.KATECB\r\n                     KAT_AES.KATGCM\r\n                     KAT_AES.KATCCM\r\n                     KAT_AES.KATOCB3\r\n                     KAT_AES.KATXTS\r\n                     KAT_AES\r\n                     KAT_AESGCMSIV\r\n                     KAT_AFIS\r\n                     KAT_Argon2\r\n                     KAT_Blowfish\r\n                     KAT_CAST5\r\n                     KAT_Camellia\r\n                     KAT_Curve25519\r\n                     KAT_Curve448\r\n                     KAT_DES\r\n                     KAT_Ed25519\r\n                     KAT_Ed448\r\n                     KAT_EdDSA\r\n                     KAT_CMAC\r\n                     KAT_HKDF\r\n                     KAT_HMAC\r\n                     KAT_KMAC\r\n                     KAT_MiyaguchiPreneel\r\n                     KAT_PBKDF2\r\n                     KAT_OTP\r\n                     KAT_PubKey.DSA\r\n                     KAT_PubKey.ECC\r\n                     KAT_PubKey.ECDSA\r\n                     KAT_PubKey.OAEP\r\n                     KAT_PubKey.PSS\r\n                     KAT_PubKey.P256\r\n                     KAT_PubKey.RSA\r\n                     KAT_PubKey.Rabin\r\n                     KAT_PubKey\r\n                     KAT_RC4\r\n                     KAT_Scrypt\r\n                     KAT_TripleDES\r\n                     KAT_Twofish\r\n                     ChaChaPoly1305\r\n                     Number\r\n                     Number.F2m\r\n                     Padding\r\n                     Poly1305\r\n                     Salsa\r\n                     Utils\r\n                     XSalsa\r\n  Build-Depends:     base >= 0 && < 10\r\n                   , bytestring\r\n                   , memory\r\n                   , tasty\r\n                   , tasty-quickcheck\r\n                   , tasty-hunit\r\n                   , tasty-kat\r\n                   , cryptonite\r\n  ghc-options:       -Wall -fno-warn-orphans -fno-warn-missing-signatures -rtsopts\r\n  default-language:  Haskell2010\r\n\r\nBenchmark bench-cryptonite\r\n  type:              exitcode-stdio-1.0\r\n  hs-source-dirs:    benchs\r\n  Main-is:           Bench.hs\r\n  Other-modules:     Number.F2m\r\n  Build-Depends:     base\r\n                   , bytestring\r\n                   , deepseq\r\n                   , memory\r\n                   , gauge\r\n                   , random\r\n                   , cryptonite\r\n  ghc-options:       -Wall -fno-warn-missing-signatures\r\n  default-language:  Haskell2010\r\n";
    }