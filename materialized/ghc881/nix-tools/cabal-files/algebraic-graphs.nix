{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  ({
    flags = {};
    package = {
      specVersion = "2.2";
      identifier = { name = "algebraic-graphs"; version = "0.5"; };
      license = "MIT";
      copyright = "Andrey Mokhov, 2016-2019";
      maintainer = "Andrey Mokhov <andrey.mokhov@gmail.com>, github: @snowleopard,\nAlexandre Moine <alexandre@moine.me>, github: @nobrakal";
      author = "Andrey Mokhov <andrey.mokhov@gmail.com>, github: @snowleopard";
      homepage = "https://github.com/snowleopard/alga";
      url = "";
      synopsis = "A library for algebraic graph construction and transformation";
      description = "<https://github.com/snowleopard/alga Alga> is a library for algebraic construction and\nmanipulation of graphs in Haskell. See <https://github.com/snowleopard/alga-paper this paper>\nfor the motivation behind the library, the underlying theory and implementation details.\n\nThe top-level module\n<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph.html Algebra.Graph>\ndefines the main data type for /algebraic graphs/\n<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph.html#t:Graph Graph>,\nas well as associated algorithms. For type-safe representation and\nmanipulation of /non-empty algebraic graphs/, see\n<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-NonEmpty.html Algebra.Graph.NonEmpty>.\nFurthermore, /algebraic graphs with edge labels/ are implemented in\n<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Labelled.html Algebra.Graph.Labelled>.\n\nThe library also provides conventional graph data structures, such as\n<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-AdjacencyMap.html Algebra.Graph.AdjacencyMap>\nalong with its various flavours: adjacency maps specialised to graphs with\nvertices of type 'Int'\n(<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-AdjacencyIntMap.html Algebra.Graph.AdjacencyIntMap>),\nnon-empty adjacency maps\n(<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-NonEmpty-AdjacencyMap.html Algebra.Graph.NonEmpty.AdjacencyMap>),\nand adjacency maps with edge labels\n(<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Labelled-AdjacencyMap.html Algebra.Graph.Labelled.AdjacencyMap>).\nA large part of the API of algebraic graphs and adjacency maps is available\nthrough the 'Foldable'-like type class\n<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-ToGraph.html Algebra.Graph.ToGraph>.\n\nThe type classes defined in\n<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Class.html Algebra.Graph.Class>\nand\n<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-HigherKinded-Class.html Algebra.Graph.HigherKinded.Class>\ncan be used for polymorphic construction and manipulation of graphs.\n\nThis is an experimental library and the API is expected to remain unstable until version 1.0.0.\nPlease consider contributing to the on-going\n<https://github.com/snowleopard/alga/issues discussions on the library API>.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs."array" or (errorHandler.buildDepError "array"))
          (hsPkgs."base" or (errorHandler.buildDepError "base"))
          (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
          (hsPkgs."deepseq" or (errorHandler.buildDepError "deepseq"))
          (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
          (hsPkgs."transformers" or (errorHandler.buildDepError "transformers"))
          ];
        buildable = true;
        };
      tests = {
        "test-alga" = {
          depends = [
            (hsPkgs."array" or (errorHandler.buildDepError "array"))
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
            (hsPkgs."deepseq" or (errorHandler.buildDepError "deepseq"))
            (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
            (hsPkgs."transformers" or (errorHandler.buildDepError "transformers"))
            (hsPkgs."algebraic-graphs" or (errorHandler.buildDepError "algebraic-graphs"))
            (hsPkgs."extra" or (errorHandler.buildDepError "extra"))
            (hsPkgs."inspection-testing" or (errorHandler.buildDepError "inspection-testing"))
            (hsPkgs."QuickCheck" or (errorHandler.buildDepError "QuickCheck"))
            ];
          buildable = true;
          };
        };
      };
    } // {
    src = (pkgs.lib).mkDefault (pkgs.fetchurl {
      url = "http://hackage.haskell.org/package/algebraic-graphs-0.5.tar.gz";
      sha256 = "89b9fecf8245476ec823355125fcb95decf41fd9784e807d7bd0d09f0a79c50b";
      });
    }) // {
    package-description-override = "cabal-version: 2.2\nname:          algebraic-graphs\nversion:       0.5\nsynopsis:      A library for algebraic graph construction and transformation\nlicense:       MIT\nlicense-file:  LICENSE\nauthor:        Andrey Mokhov <andrey.mokhov@gmail.com>, github: @snowleopard\nmaintainer:    Andrey Mokhov <andrey.mokhov@gmail.com>, github: @snowleopard,\n               Alexandre Moine <alexandre@moine.me>, github: @nobrakal\ncopyright:     Andrey Mokhov, 2016-2019\nhomepage:      https://github.com/snowleopard/alga\ncategory:      Algebra, Algorithms, Data Structures, Graphs\nbuild-type:    Simple\ntested-with:   GHC == 8.0.2,\n               GHC == 8.2.2,\n               GHC == 8.4.4,\n               GHC == 8.6.5,\n               GHC == 8.8.1\nstability:     experimental\ndescription:\n    <https://github.com/snowleopard/alga Alga> is a library for algebraic construction and\n    manipulation of graphs in Haskell. See <https://github.com/snowleopard/alga-paper this paper>\n    for the motivation behind the library, the underlying theory and implementation details.\n    .\n    The top-level module\n    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph.html Algebra.Graph>\n    defines the main data type for /algebraic graphs/\n    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph.html#t:Graph Graph>,\n    as well as associated algorithms. For type-safe representation and\n    manipulation of /non-empty algebraic graphs/, see\n    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-NonEmpty.html Algebra.Graph.NonEmpty>.\n    Furthermore, /algebraic graphs with edge labels/ are implemented in\n    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Labelled.html Algebra.Graph.Labelled>.\n    .\n    The library also provides conventional graph data structures, such as\n    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-AdjacencyMap.html Algebra.Graph.AdjacencyMap>\n    along with its various flavours: adjacency maps specialised to graphs with\n    vertices of type 'Int'\n    (<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-AdjacencyIntMap.html Algebra.Graph.AdjacencyIntMap>),\n    non-empty adjacency maps\n    (<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-NonEmpty-AdjacencyMap.html Algebra.Graph.NonEmpty.AdjacencyMap>),\n    and adjacency maps with edge labels\n    (<http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Labelled-AdjacencyMap.html Algebra.Graph.Labelled.AdjacencyMap>).\n    A large part of the API of algebraic graphs and adjacency maps is available\n    through the 'Foldable'-like type class\n    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-ToGraph.html Algebra.Graph.ToGraph>.\n    .\n    The type classes defined in\n    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-Class.html Algebra.Graph.Class>\n    and\n    <http://hackage.haskell.org/package/algebraic-graphs/docs/Algebra-Graph-HigherKinded-Class.html Algebra.Graph.HigherKinded.Class>\n    can be used for polymorphic construction and manipulation of graphs.\n    .\n    This is an experimental library and the API is expected to remain unstable until version 1.0.0.\n    Please consider contributing to the on-going\n    <https://github.com/snowleopard/alga/issues discussions on the library API>.\n\nextra-doc-files:\n    AUTHORS.md\n    CHANGES.md\n    README.md\n\nsource-repository head\n    type:     git\n    location: https://github.com/snowleopard/alga.git\n\ncommon common-settings\n    build-depends:      array        >= 0.4     && < 0.6,\n                        base         >= 4.7     && < 5,\n                        containers   >= 0.5.5.1 && < 0.8,\n                        deepseq      >= 1.3.0.1 && < 1.5,\n                        mtl          >= 2.1     && < 2.3,\n                        transformers >= 0.4     && < 0.6\n    default-language:   Haskell2010\n    default-extensions: FlexibleContexts\n                        FlexibleInstances\n                        GeneralizedNewtypeDeriving\n                        ScopedTypeVariables\n                        TupleSections\n                        TypeApplications\n                        TypeFamilies\n    other-extensions:   CPP\n                        DeriveFunctor\n                        OverloadedStrings\n                        RankNTypes\n                        RecordWildCards\n    GHC-options:        -Wall\n                        -Wcompat\n                        -Wincomplete-record-updates\n                        -Wincomplete-uni-patterns\n                        -Wredundant-constraints\n                        -fno-warn-name-shadowing\n                        -fspec-constr\n\nlibrary\n    import:             common-settings\n    hs-source-dirs:     src\n    exposed-modules:    Algebra.Graph,\n                        Algebra.Graph.Undirected,\n                        Algebra.Graph.Acyclic.AdjacencyMap,\n                        Algebra.Graph.AdjacencyIntMap,\n                        Algebra.Graph.AdjacencyIntMap.Algorithm,\n                        Algebra.Graph.AdjacencyMap,\n                        Algebra.Graph.AdjacencyMap.Algorithm,\n                        Algebra.Graph.Bipartite.Undirected.AdjacencyMap,\n                        Algebra.Graph.Class,\n                        Algebra.Graph.Export,\n                        Algebra.Graph.Export.Dot,\n                        Algebra.Graph.HigherKinded.Class,\n                        Algebra.Graph.Internal,\n                        Algebra.Graph.Label,\n                        Algebra.Graph.Labelled,\n                        Algebra.Graph.Labelled.AdjacencyMap,\n                        Algebra.Graph.Labelled.Example.Automaton,\n                        Algebra.Graph.Labelled.Example.Network,\n                        Algebra.Graph.NonEmpty,\n                        Algebra.Graph.NonEmpty.AdjacencyMap,\n                        Algebra.Graph.Relation,\n                        Algebra.Graph.Relation.Preorder,\n                        Algebra.Graph.Relation.Reflexive,\n                        Algebra.Graph.Relation.Symmetric,\n                        Algebra.Graph.Relation.Transitive,\n                        Algebra.Graph.ToGraph,\n                        Data.Graph.Typed\n\ntest-suite test-alga\n    import:             common-settings\n    hs-source-dirs:     test\n    type:               exitcode-stdio-1.0\n    main-is:            Main.hs\n    other-modules:      Algebra.Graph.Test,\n                        Algebra.Graph.Test.API,\n                        Algebra.Graph.Test.Acyclic.AdjacencyMap,\n                        Algebra.Graph.Test.AdjacencyIntMap,\n                        Algebra.Graph.Test.AdjacencyMap,\n                        Algebra.Graph.Test.Arbitrary,\n                        Algebra.Graph.Test.Bipartite.Undirected.AdjacencyMap,\n                        Algebra.Graph.Test.Export,\n                        Algebra.Graph.Test.Generic,\n                        Algebra.Graph.Test.Graph,\n                        Algebra.Graph.Test.Undirected,\n                        Algebra.Graph.Test.Internal,\n                        Algebra.Graph.Test.Label,\n                        Algebra.Graph.Test.Labelled.AdjacencyMap,\n                        Algebra.Graph.Test.Labelled.Graph,\n                        Algebra.Graph.Test.NonEmpty.AdjacencyMap,\n                        Algebra.Graph.Test.NonEmpty.Graph,\n                        Algebra.Graph.Test.Relation,\n                        Algebra.Graph.Test.Relation.SymmetricRelation,\n                        Algebra.Graph.Test.RewriteRules,\n                        Data.Graph.Test.Typed\n    build-depends:      algebraic-graphs,\n                        extra              >= 1.4     && < 2,\n                        inspection-testing >= 0.4.2.2 && < 0.5,\n                        QuickCheck         >= 2.10    && < 2.14\n    other-extensions:   ConstrainedClassMethods\n                        ConstraintKinds\n                        MultiParamTypeClasses\n                        TemplateHaskell\n                        ViewPatterns\n";
    }