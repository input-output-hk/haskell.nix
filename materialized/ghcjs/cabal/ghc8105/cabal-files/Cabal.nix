{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  ({
    flags = {};
    package = {
      specVersion = "1.22";
      identifier = { name = "Cabal"; version = "3.8.1.0"; };
      license = "BSD-3-Clause";
      copyright = "2003-2022, Cabal Development Team (see AUTHORS file)";
      maintainer = "cabal-devel@haskell.org";
      author = "Cabal Development Team <cabal-devel@haskell.org>";
      homepage = "http://www.haskell.org/cabal/";
      url = "";
      synopsis = "A framework for packaging Haskell software";
      description = "The Haskell Common Architecture for Building Applications and\nLibraries: a framework defining a common interface for authors to more\neasily build their Haskell applications in a portable way.\n\nThe Haskell Cabal is part of a larger infrastructure for distributing,\norganizing, and cataloging Haskell libraries and tools.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = ([
          (hsPkgs."Cabal-syntax" or (errorHandler.buildDepError "Cabal-syntax"))
          (hsPkgs."array" or (errorHandler.buildDepError "array"))
          (hsPkgs."base" or (errorHandler.buildDepError "base"))
          (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
          (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
          (hsPkgs."deepseq" or (errorHandler.buildDepError "deepseq"))
          (hsPkgs."directory" or (errorHandler.buildDepError "directory"))
          (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
          (hsPkgs."pretty" or (errorHandler.buildDepError "pretty"))
          (hsPkgs."process" or (errorHandler.buildDepError "process"))
          (hsPkgs."time" or (errorHandler.buildDepError "time"))
          (hsPkgs."transformers" or (errorHandler.buildDepError "transformers"))
          (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
          (hsPkgs."text" or (errorHandler.buildDepError "text"))
          (hsPkgs."parsec" or (errorHandler.buildDepError "parsec"))
          ] ++ (pkgs.lib).optional (compiler.isGhc && (compiler.version).ge "8.2") (hsPkgs."process" or (errorHandler.buildDepError "process"))) ++ (if system.isWindows
          then [ (hsPkgs."Win32" or (errorHandler.buildDepError "Win32")) ]
          else [ (hsPkgs."unix" or (errorHandler.buildDepError "unix")) ]);
        buildable = true;
        };
      };
    } // {
    src = (pkgs.lib).mkDefault (pkgs.fetchurl {
      url = "http://hackage.haskell.org/package/Cabal-3.8.1.0.tar.gz";
      sha256 = "7464cbe6c2f3d7e5d0232023a1a7330621f8b24853cb259fc89a2af85b736608";
      });
    }) // {
    package-description-override = "cabal-version: 1.22\nname:          Cabal\nversion:       3.8.1.0\ncopyright:     2003-2022, Cabal Development Team (see AUTHORS file)\nlicense:       BSD3\nlicense-file:  LICENSE\nauthor:        Cabal Development Team <cabal-devel@haskell.org>\nmaintainer:    cabal-devel@haskell.org\nhomepage:      http://www.haskell.org/cabal/\nbug-reports:   https://github.com/haskell/cabal/issues\nsynopsis:      A framework for packaging Haskell software\ndescription:\n  The Haskell Common Architecture for Building Applications and\n  Libraries: a framework defining a common interface for authors to more\n  easily build their Haskell applications in a portable way.\n  .\n  The Haskell Cabal is part of a larger infrastructure for distributing,\n  organizing, and cataloging Haskell libraries and tools.\ncategory:       Distribution\nbuild-type:     Simple\n-- If we use a new Cabal feature, this needs to be changed to Custom so\n-- we can bootstrap.\n\nextra-source-files:\n  README.md ChangeLog.md\n\nsource-repository head\n  type:     git\n  location: https://github.com/haskell/cabal/\n  subdir:   Cabal\n\nlibrary\n  default-language: Haskell2010\n  hs-source-dirs: src\n\n  build-depends:\n    Cabal-syntax >= 3.8    && < 3.9,\n    array      >= 0.4.0.1  && < 0.6,\n    base       >= 4.6      && < 5,\n    bytestring >= 0.10.0.0 && < 0.12,\n    containers >= 0.5.0.0  && < 0.7,\n    deepseq    >= 1.3.0.1  && < 1.5,\n    directory  >= 1.2      && < 1.4,\n    filepath   >= 1.3.0.1  && < 1.5,\n    pretty     >= 1.1.1    && < 1.2,\n    process    >= 1.2.1.0  && < 1.7,\n    time       >= 1.4.0.1  && < 1.13\n\n  -- pull in process version with fixed waitForProcess error\n  if impl(ghc >=8.2)\n    build-depends: process >= 1.6.14.0\n\n  if os(windows)\n    build-depends: Win32 >= 2.3.0.0 && < 2.14\n  else\n    build-depends: unix  >= 2.6.0.0 && < 2.8\n\n  ghc-options: -Wall -fno-ignore-asserts -fwarn-tabs -fwarn-incomplete-uni-patterns -fwarn-incomplete-record-updates\n  ghc-options: -Wcompat -Wnoncanonical-monad-instances\n\n  if impl(ghc <8.8)\n    ghc-options: -Wnoncanonical-monadfail-instances\n\n  exposed-modules:\n    Distribution.Backpack.Configure\n    Distribution.Backpack.ComponentsGraph\n    Distribution.Backpack.ConfiguredComponent\n    Distribution.Backpack.DescribeUnitId\n    Distribution.Backpack.FullUnitId\n    Distribution.Backpack.LinkedComponent\n    Distribution.Backpack.ModSubst\n    Distribution.Backpack.ModuleShape\n    Distribution.Backpack.PreModuleShape\n    Distribution.Utils.IOData\n    Distribution.Utils.LogProgress\n    Distribution.Utils.MapAccum\n    Distribution.Compat.CreatePipe\n    Distribution.Compat.Directory\n    Distribution.Compat.Environment\n    Distribution.Compat.FilePath\n    Distribution.Compat.Internal.TempFile\n    Distribution.Compat.ResponseFile\n    Distribution.Compat.Prelude.Internal\n    Distribution.Compat.Process\n    Distribution.Compat.Stack\n    Distribution.Compat.Time\n    Distribution.Make\n    Distribution.PackageDescription.Check\n    Distribution.ReadE\n    Distribution.Simple\n    Distribution.Simple.Bench\n    Distribution.Simple.Build\n    Distribution.Simple.Build.Macros\n    Distribution.Simple.Build.PathsModule\n    Distribution.Simple.BuildPaths\n    Distribution.Simple.BuildTarget\n    Distribution.Simple.BuildToolDepends\n    Distribution.Simple.CCompiler\n    Distribution.Simple.Command\n    Distribution.Simple.Compiler\n    Distribution.Simple.Configure\n    Distribution.Simple.Flag\n    Distribution.Simple.GHC\n    Distribution.Simple.GHCJS\n    Distribution.Simple.Haddock\n    Distribution.Simple.Glob\n    Distribution.Simple.HaskellSuite\n    Distribution.Simple.Hpc\n    Distribution.Simple.Install\n    Distribution.Simple.InstallDirs\n    Distribution.Simple.InstallDirs.Internal\n    Distribution.Simple.LocalBuildInfo\n    Distribution.Simple.PackageDescription\n    Distribution.Simple.PackageIndex\n    Distribution.Simple.PreProcess\n    Distribution.Simple.PreProcess.Unlit\n    Distribution.Simple.Program\n    Distribution.Simple.Program.Ar\n    Distribution.Simple.Program.Builtin\n    Distribution.Simple.Program.Db\n    Distribution.Simple.Program.Find\n    Distribution.Simple.Program.GHC\n    Distribution.Simple.Program.HcPkg\n    Distribution.Simple.Program.Hpc\n    Distribution.Simple.Program.Internal\n    Distribution.Simple.Program.Ld\n    Distribution.Simple.Program.ResponseFile\n    Distribution.Simple.Program.Run\n    Distribution.Simple.Program.Script\n    Distribution.Simple.Program.Strip\n    Distribution.Simple.Program.Types\n    Distribution.Simple.Register\n    Distribution.Simple.Setup\n    Distribution.Simple.ShowBuildInfo\n    Distribution.Simple.SrcDist\n    Distribution.Simple.Test\n    Distribution.Simple.Test.ExeV10\n    Distribution.Simple.Test.LibV09\n    Distribution.Simple.Test.Log\n    Distribution.Simple.UHC\n    Distribution.Simple.UserHooks\n    Distribution.Simple.Utils\n    Distribution.TestSuite\n    Distribution.Types.AnnotatedId\n    Distribution.Types.ComponentInclude\n    Distribution.Types.DumpBuildInfo\n    Distribution.Types.PackageName.Magic\n    Distribution.Types.ComponentLocalBuildInfo\n    Distribution.Types.LocalBuildInfo\n    Distribution.Types.TargetInfo\n    Distribution.Types.GivenComponent\n    Distribution.Utils.Json\n    Distribution.Utils.NubList\n    Distribution.Utils.Progress\n    Distribution.Verbosity\n    Distribution.Verbosity.Internal\n\n  -- We reexport all of Cabal-syntax to aid in compatibility for downstream\n  -- users. In the future we may opt to deprecate some or all of these exports.\n  -- See haskell/Cabal#7974.\n  reexported-modules:\n    Distribution.Backpack,\n    Distribution.CabalSpecVersion,\n    Distribution.Compat.Binary,\n    Distribution.Compat.CharParsing,\n    Distribution.Compat.DList,\n    Distribution.Compat.Exception,\n    Distribution.Compat.Graph,\n    Distribution.Compat.Lens,\n    Distribution.Compat.MonadFail,\n    Distribution.Compat.Newtype,\n    Distribution.Compat.NonEmptySet,\n    Distribution.Compat.Parsing,\n    Distribution.Compat.Prelude,\n    Distribution.Compat.Semigroup,\n    Distribution.Compat.Typeable,\n    Distribution.Compiler,\n    Distribution.FieldGrammar,\n    Distribution.FieldGrammar.Class,\n    Distribution.FieldGrammar.FieldDescrs,\n    Distribution.FieldGrammar.Newtypes,\n    Distribution.FieldGrammar.Parsec,\n    Distribution.FieldGrammar.Pretty,\n    Distribution.Fields,\n    Distribution.Fields.ConfVar,\n    Distribution.Fields.Field,\n    Distribution.Fields.Lexer,\n    Distribution.Fields.LexerMonad,\n    Distribution.Fields.ParseResult,\n    Distribution.Fields.Parser,\n    Distribution.Fields.Pretty,\n    Distribution.InstalledPackageInfo,\n    Distribution.License,\n    Distribution.ModuleName,\n    Distribution.Package,\n    Distribution.PackageDescription,\n    Distribution.PackageDescription.Configuration,\n    Distribution.PackageDescription.FieldGrammar,\n    Distribution.PackageDescription.Parsec,\n    Distribution.PackageDescription.PrettyPrint,\n    Distribution.PackageDescription.Quirks,\n    Distribution.PackageDescription.Utils,\n    Distribution.Parsec,\n    Distribution.Parsec.Error,\n    Distribution.Parsec.FieldLineStream,\n    Distribution.Parsec.Position,\n    Distribution.Parsec.Warning,\n    Distribution.Pretty,\n    Distribution.SPDX,\n    Distribution.SPDX.License,\n    Distribution.SPDX.LicenseExceptionId,\n    Distribution.SPDX.LicenseExpression,\n    Distribution.SPDX.LicenseId,\n    Distribution.SPDX.LicenseListVersion,\n    Distribution.SPDX.LicenseReference,\n    Distribution.System,\n    Distribution.Text,\n    Distribution.Types.AbiDependency,\n    Distribution.Types.AbiHash,\n    Distribution.Types.Benchmark,\n    Distribution.Types.Benchmark.Lens,\n    Distribution.Types.BenchmarkInterface,\n    Distribution.Types.BenchmarkType,\n    Distribution.Types.BuildInfo,\n    Distribution.Types.BuildInfo.Lens,\n    Distribution.Types.BuildType,\n    Distribution.Types.Component,\n    Distribution.Types.ComponentId,\n    Distribution.Types.ComponentName,\n    Distribution.Types.ComponentRequestedSpec,\n    Distribution.Types.CondTree,\n    Distribution.Types.Condition,\n    Distribution.Types.ConfVar,\n    Distribution.Types.Dependency,\n    Distribution.Types.DependencyMap,\n    Distribution.Types.ExeDependency,\n    Distribution.Types.Executable,\n    Distribution.Types.Executable.Lens,\n    Distribution.Types.ExecutableScope,\n    Distribution.Types.ExposedModule,\n    Distribution.Types.Flag,\n    Distribution.Types.ForeignLib,\n    Distribution.Types.ForeignLib.Lens,\n    Distribution.Types.ForeignLibOption,\n    Distribution.Types.ForeignLibType,\n    Distribution.Types.GenericPackageDescription,\n    Distribution.Types.GenericPackageDescription.Lens,\n    Distribution.Types.HookedBuildInfo,\n    Distribution.Types.IncludeRenaming,\n    Distribution.Types.InstalledPackageInfo,\n    Distribution.Types.InstalledPackageInfo.Lens,\n    Distribution.Types.InstalledPackageInfo.FieldGrammar,\n    Distribution.Types.LegacyExeDependency,\n    Distribution.Types.Lens,\n    Distribution.Types.Library,\n    Distribution.Types.Library.Lens,\n    Distribution.Types.LibraryName,\n    Distribution.Types.LibraryVisibility,\n    Distribution.Types.Mixin,\n    Distribution.Types.Module,\n    Distribution.Types.ModuleReexport,\n    Distribution.Types.ModuleRenaming,\n    Distribution.Types.MungedPackageId,\n    Distribution.Types.MungedPackageName,\n    Distribution.Types.PackageDescription,\n    Distribution.Types.PackageDescription.Lens,\n    Distribution.Types.PackageId,\n    Distribution.Types.PackageId.Lens,\n    Distribution.Types.PackageName,\n    Distribution.Types.PackageVersionConstraint,\n    Distribution.Types.PkgconfigDependency,\n    Distribution.Types.PkgconfigName,\n    Distribution.Types.PkgconfigVersion,\n    Distribution.Types.PkgconfigVersionRange,\n    Distribution.Types.SetupBuildInfo,\n    Distribution.Types.SetupBuildInfo.Lens,\n    Distribution.Types.SourceRepo,\n    Distribution.Types.SourceRepo.Lens,\n    Distribution.Types.TestSuite,\n    Distribution.Types.TestSuite.Lens,\n    Distribution.Types.TestSuiteInterface,\n    Distribution.Types.TestType,\n    Distribution.Types.UnitId,\n    Distribution.Types.UnqualComponentName,\n    Distribution.Types.Version,\n    Distribution.Types.VersionInterval,\n    Distribution.Types.VersionInterval.Legacy,\n    Distribution.Types.VersionRange,\n    Distribution.Types.VersionRange.Internal,\n    Distribution.Utils.Base62,\n    Distribution.Utils.Generic,\n    Distribution.Utils.MD5,\n    Distribution.Utils.Path,\n    Distribution.Utils.ShortText,\n    Distribution.Utils.String,\n    Distribution.Utils.Structured,\n    Distribution.Version,\n    Language.Haskell.Extension\n\n  -- Parsec parser-related modules\n  build-depends:\n    -- transformers-0.4.0.0 doesn't have record syntax e.g. for Identity\n    -- See also https://github.com/ekmett/transformers-compat/issues/35\n    transformers (>= 0.3      && < 0.4) || (>=0.4.1.0 && <0.6),\n    mtl           >= 2.1      && < 2.3,\n    text         (>= 1.2.3.0  && < 1.3) || (>= 2.0 && < 2.1),\n    parsec        >= 3.1.13.0 && < 3.2\n\n  other-modules:\n    Distribution.Backpack.PreExistingComponent\n    Distribution.Backpack.ReadyComponent\n    Distribution.Backpack.MixLink\n    Distribution.Backpack.ModuleScope\n    Distribution.Backpack.UnifyM\n    Distribution.Backpack.Id\n    Distribution.Utils.UnionFind\n    Distribution.Compat.Async\n    Distribution.Compat.CopyFile\n    Distribution.Compat.GetShortPathName\n    Distribution.Compat.SnocList\n    Distribution.GetOpt\n    Distribution.Lex\n    Distribution.Simple.Build.Macros.Z\n    Distribution.Simple.Build.PathsModule.Z\n    Distribution.Simple.GHC.EnvironmentParser\n    Distribution.Simple.GHC.Internal\n    Distribution.Simple.GHC.ImplInfo\n    Distribution.ZinzaPrelude\n    Paths_Cabal\n\n  other-extensions:\n    BangPatterns\n    CPP\n    DefaultSignatures\n    DeriveDataTypeable\n    DeriveFoldable\n    DeriveFunctor\n    DeriveGeneric\n    DeriveTraversable\n    ExistentialQuantification\n    FlexibleContexts\n    FlexibleInstances\n    GeneralizedNewtypeDeriving\n    ImplicitParams\n    KindSignatures\n    LambdaCase\n    NondecreasingIndentation\n    OverloadedStrings\n    PatternSynonyms\n    RankNTypes\n    RecordWildCards\n    ScopedTypeVariables\n    StandaloneDeriving\n    Trustworthy\n    TypeFamilies\n    TypeOperators\n    TypeSynonymInstances\n    UndecidableInstances\n";
    }