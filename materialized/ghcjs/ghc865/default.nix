{
  pkgs = hackage:
    {
      packages = {
        "charset".revision = (((hackage."charset")."0.3.8").revisions).default;
        "cryptohash".revision = (((hackage."cryptohash")."0.11.9").revisions).default;
        "time-manager".revision = (((hackage."time-manager")."0.0.0").revisions).default;
        "happy".revision = (((hackage."happy")."1.20.0").revisions).default;
        "ghc-boot".revision = (((hackage."ghc-boot")."8.6.5").revisions).default;
        "tf-random".revision = (((hackage."tf-random")."0.5").revisions).default;
        "generics-sop".revision = (((hackage."generics-sop")."0.5.1.0").revisions).default;
        "old-time".revision = (((hackage."old-time")."1.1.0.3").revisions).default;
        "system-fileio".revision = (((hackage."system-fileio")."0.3.16.4").revisions).default;
        "byteorder".revision = (((hackage."byteorder")."1.0.4").revisions).default;
        "ghc-boot-th".revision = (((hackage."ghc-boot-th")."8.6.5").revisions).default;
        "call-stack".revision = (((hackage."call-stack")."0.2.0").revisions).default;
        "ghc-prim".revision = (((hackage."ghc-prim")."0.5.3").revisions).default;
        "regex-posix".revision = (((hackage."regex-posix")."0.96.0.0").revisions).default;
        "regex-posix".flags._regex-posix-clib = false;
        "distributive".revision = (((hackage."distributive")."0.6.2.1").revisions).default;
        "distributive".flags.tagged = true;
        "distributive".flags.semigroups = true;
        "streaming-commons".revision = (((hackage."streaming-commons")."0.2.2.1").revisions).default;
        "streaming-commons".flags.use-bytestring-builder = false;
        "ghc-paths".revision = (((hackage."ghc-paths")."0.1.0.12").revisions).default;
        "pretty".revision = (((hackage."pretty")."1.1.3.6").revisions).default;
        "network-uri".revision = (((hackage."network-uri")."2.6.4.1").revisions).default;
        "haskell-src-exts".revision = (((hackage."haskell-src-exts")."1.20.3").revisions).default;
        "indexed-traversable".revision = (((hackage."indexed-traversable")."0.1.1").revisions).default;
        "psqueues".revision = (((hackage."psqueues")."0.2.7.2").revisions).default;
        "integer-logarithms".revision = (((hackage."integer-logarithms")."1.0.3.1").revisions).default;
        "integer-logarithms".flags.check-bounds = false;
        "integer-logarithms".flags.integer-gmp = true;
        "HUnit".revision = (((hackage."HUnit")."1.6.1.0").revisions).default;
        "lifted-async".revision = (((hackage."lifted-async")."0.10.1.3").revisions).default;
        "async".revision = (((hackage."async")."2.2.3").revisions).default;
        "async".flags.bench = false;
        "text".revision = (((hackage."text")."1.2.3.1").revisions).default;
        "base".revision = (((hackage."base")."4.12.0.0").revisions).default;
        "word8".revision = (((hackage."word8")."0.1.3").revisions).default;
        "time".revision = (((hackage."time")."1.8.0.2").revisions).default;
        "bsb-http-chunked".revision = (((hackage."bsb-http-chunked")."0.0.0.4").revisions).default;
        "adjunctions".revision = (((hackage."adjunctions")."4.4").revisions).default;
        "bifunctors".revision = (((hackage."bifunctors")."5.5.7").revisions).default;
        "bifunctors".flags.tagged = true;
        "bifunctors".flags.semigroups = true;
        "kan-extensions".revision = (((hackage."kan-extensions")."5.2.2").revisions).default;
        "cabal-doctest".revision = (((hackage."cabal-doctest")."1.0.8").revisions).default;
        "parsers".revision = (((hackage."parsers")."0.12.10").revisions).default;
        "parsers".flags.binary = true;
        "parsers".flags.parsec = true;
        "parsers".flags.attoparsec = true;
        "random".revision = (((hackage."random")."1.1").revisions).default;
        "unix-time".revision = (((hackage."unix-time")."0.4.7").revisions).default;
        "dlist".revision = (((hackage."dlist")."0.8.0.8").revisions).default;
        "unordered-containers".revision = (((hackage."unordered-containers")."0.2.13.0").revisions).default;
        "unordered-containers".flags.debug = false;
        "haddock-library".revision = (((hackage."haddock-library")."1.10.0").revisions).default;
        "entropy".revision = (((hackage."entropy")."0.4.1.6").revisions).default;
        "entropy".flags.halvm = false;
        "system-filepath".revision = (((hackage."system-filepath")."0.4.14").revisions).default;
        "wai".revision = (((hackage."wai")."3.2.3").revisions).default;
        "easy-file".revision = (((hackage."easy-file")."0.2.2").revisions).default;
        "th-orphans".revision = (((hackage."th-orphans")."0.13.11").revisions).default;
        "array".revision = (((hackage."array")."0.5.3.0").revisions).default;
        "base64-bytestring".revision = (((hackage."base64-bytestring")."1.0.0.3").revisions).default;
        "cookie".revision = (((hackage."cookie")."0.4.5").revisions).default;
        "process".revision = (((hackage."process")."1.6.5.0").revisions).default;
        "semigroupoids".revision = (((hackage."semigroupoids")."5.3.4").revisions).default;
        "semigroupoids".flags.doctests = true;
        "semigroupoids".flags.distributive = true;
        "semigroupoids".flags.tagged = true;
        "semigroupoids".flags.containers = true;
        "semigroupoids".flags.contravariant = true;
        "semigroupoids".flags.unordered-containers = true;
        "semigroupoids".flags.comonad = true;
        "data-default-class".revision = (((hackage."data-default-class")."0.1.2.0").revisions).default;
        "th-abstraction".revision = (((hackage."th-abstraction")."0.3.2.0").revisions).default;
        "data-default-instances-containers".revision = (((hackage."data-default-instances-containers")."0.0.1").revisions).default;
        "base16-bytestring".revision = (((hackage."base16-bytestring")."0.1.1.7").revisions).default;
        "regex-base".revision = (((hackage."regex-base")."0.94.0.1").revisions).default;
        "conduit".revision = (((hackage."conduit")."1.3.4.1").revisions).default;
        "transformers-base".revision = (((hackage."transformers-base")."0.4.5.2").revisions).default;
        "transformers-base".flags.orphaninstances = true;
        "vector".revision = (((hackage."vector")."0.12.2.0").revisions).default;
        "vector".flags.unsafechecks = false;
        "vector".flags.internalchecks = false;
        "vector".flags.wall = false;
        "vector".flags.boundschecks = true;
        "network".revision = (((hackage."network")."3.1.2.1").revisions).default;
        "network".flags.devel = false;
        "invariant".revision = (((hackage."invariant")."0.5.3").revisions).default;
        "hsc2hs".revision = (((hackage."hsc2hs")."0.68.7").revisions).default;
        "hsc2hs".flags.in-ghc-tree = false;
        "cryptonite".revision = (((hackage."cryptonite")."0.28").revisions).default;
        "cryptonite".flags.check_alignment = false;
        "cryptonite".flags.support_sse = false;
        "cryptonite".flags.old_toolchain_inliner = false;
        "cryptonite".flags.integer-gmp = true;
        "cryptonite".flags.use_target_attributes = true;
        "cryptonite".flags.support_deepseq = true;
        "cryptonite".flags.support_pclmuldq = false;
        "cryptonite".flags.support_aesni = true;
        "cryptonite".flags.support_rdrand = true;
        "parallel".revision = (((hackage."parallel")."3.2.2.0").revisions).default;
        "vector-algorithms".revision = (((hackage."vector-algorithms")."0.8.0.4").revisions).default;
        "vector-algorithms".flags.unsafechecks = false;
        "vector-algorithms".flags.internalchecks = false;
        "vector-algorithms".flags.bench = true;
        "vector-algorithms".flags.llvm = false;
        "vector-algorithms".flags.properties = true;
        "vector-algorithms".flags.boundschecks = true;
        "wai-logger".revision = (((hackage."wai-logger")."2.3.6").revisions).default;
        "lens".revision = (((hackage."lens")."4.17.1").revisions).default;
        "lens".flags.safe = false;
        "lens".flags.j = false;
        "lens".flags.test-templates = true;
        "lens".flags.benchmark-uniplate = false;
        "lens".flags.trustworthy = true;
        "lens".flags.old-inline-pragmas = false;
        "lens".flags.test-hunit = true;
        "lens".flags.test-doctests = true;
        "lens".flags.dump-splices = false;
        "lens".flags.inlining = true;
        "lens".flags.test-properties = true;
        "profunctors".revision = (((hackage."profunctors")."5.6").revisions).default;
        "http-types".revision = (((hackage."http-types")."0.12.3").revisions).default;
        "directory-tree".revision = (((hackage."directory-tree")."0.12.1").revisions).default;
        "comonad".revision = (((hackage."comonad")."5.0.8").revisions).default;
        "comonad".flags.distributive = true;
        "comonad".flags.containers = true;
        "comonad".flags.indexed-traversable = true;
        "xml".revision = (((hackage."xml")."1.3.14").revisions).default;
        "temporary".revision = (((hackage."temporary")."1.3").revisions).default;
        "shelly".revision = (((hackage."shelly")."1.8.1").revisions).default;
        "shelly".flags.build-examples = false;
        "shelly".flags.lifted = false;
        "extensible-exceptions".revision = (((hackage."extensible-exceptions")."0.1.1.4").revisions).default;
        "split".revision = (((hackage."split")."0.2.3.4").revisions).default;
        "time-compat".revision = (((hackage."time-compat")."1.9.5").revisions).default;
        "time-compat".flags.old-locale = false;
        "safe".revision = (((hackage."safe")."0.3.19").revisions).default;
        "hspec-core".revision = (((hackage."hspec-core")."2.7.8").revisions).default;
        "contravariant".revision = (((hackage."contravariant")."1.5.3").revisions).default;
        "contravariant".flags.tagged = true;
        "contravariant".flags.semigroups = true;
        "contravariant".flags.statevar = true;
        "wl-pprint-text".revision = (((hackage."wl-pprint-text")."1.2.0.1").revisions).default;
        "base-orphans".revision = (((hackage."base-orphans")."0.8.4").revisions).default;
        "appar".revision = (((hackage."appar")."0.1.8").revisions).default;
        "tree-diff".revision = (((hackage."tree-diff")."0.0.2.1").revisions).default;
        "setenv".revision = (((hackage."setenv")."0.1.1.3").revisions).default;
        "yaml".revision = (((hackage."yaml")."0.11.5.0").revisions).default;
        "yaml".flags.no-examples = true;
        "yaml".flags.no-exe = true;
        "bytestring-builder".revision = (((hackage."bytestring-builder")."0.10.8.2.0").revisions).default;
        "bytestring-builder".flags.bytestring_has_builder = true;
        "base-compat".revision = (((hackage."base-compat")."0.10.5").revisions).default;
        "http2".revision = (((hackage."http2")."1.6.5").revisions).default;
        "http2".flags.devel = false;
        "base-compat-batteries".revision = (((hackage."base-compat-batteries")."0.10.5").revisions).default;
        "exceptions".revision = (((hackage."exceptions")."0.10.4").revisions).default;
        "exceptions".flags.transformers-0-4 = true;
        "th-lift-instances".revision = (((hackage."th-lift-instances")."0.1.18").revisions).default;
        "Cabal".revision = (((hackage."Cabal")."2.4.0.1").revisions).default;
        "xhtml".revision = (((hackage."xhtml")."3000.2.2.1").revisions).default;
        "hspec".revision = (((hackage."hspec")."2.7.8").revisions).default;
        "primitive".revision = (((hackage."primitive")."0.7.1.0").revisions).default;
        "sop-core".revision = (((hackage."sop-core")."0.5.0.1").revisions).default;
        "hpc".revision = (((hackage."hpc")."0.6.0.3").revisions).default;
        "directory".revision = (((hackage."directory")."1.3.3.0").revisions).default;
        "clock".revision = (((hackage."clock")."0.8.2").revisions).default;
        "clock".flags.llvm = false;
        "quickcheck-io".revision = (((hackage."quickcheck-io")."0.2.0").revisions).default;
        "th-expand-syns".revision = (((hackage."th-expand-syns")."0.4.7.0").revisions).default;
        "optparse-applicative".revision = (((hackage."optparse-applicative")."0.14.3.0").revisions).default;
        "hspec-expectations".revision = (((hackage."hspec-expectations")."0.8.2").revisions).default;
        "constraints".revision = (((hackage."constraints")."0.13").revisions).default;
        "basement".revision = (((hackage."basement")."0.0.11").revisions).default;
        "stringsearch".revision = (((hackage."stringsearch")."0.3.6.6").revisions).default;
        "stringsearch".flags.base3 = false;
        "stringsearch".flags.base4 = true;
        "lifted-base".revision = (((hackage."lifted-base")."0.2.3.12").revisions).default;
        "hostname".revision = (((hackage."hostname")."1.0").revisions).default;
        "ghc-compact".revision = (((hackage."ghc-compact")."0.1.0.0").revisions).default;
        "old-locale".revision = (((hackage."old-locale")."1.0.0.7").revisions).default;
        "monad-control".revision = (((hackage."monad-control")."1.0.2.3").revisions).default;
        "wai-app-static".revision = (((hackage."wai-app-static")."3.1.7.2").revisions).default;
        "wai-app-static".flags.print = false;
        "mtl".revision = (((hackage."mtl")."2.2.2").revisions).default;
        "transformers".revision = (((hackage."transformers")."0.5.6.2").revisions).default;
        "simple-sendfile".revision = (((hackage."simple-sendfile")."0.2.30").revisions).default;
        "simple-sendfile".flags.allow-bsd = true;
        "rts".revision = (((hackage."rts")."1.0").revisions).default;
        "network-byte-order".revision = (((hackage."network-byte-order")."0.1.6").revisions).default;
        "parsec".revision = (((hackage."parsec")."3.1.13.0").revisions).default;
        "mime-types".revision = (((hackage."mime-types")."0.1.0.9").revisions).default;
        "blaze-markup".revision = (((hackage."blaze-markup")."0.8.2.8").revisions).default;
        "reflection".revision = (((hackage."reflection")."2.1.6").revisions).default;
        "reflection".flags.template-haskell = true;
        "reflection".flags.slow = false;
        "hspec-discover".revision = (((hackage."hspec-discover")."2.7.8").revisions).default;
        "template-haskell".revision = (((hackage."template-haskell")."2.14.0.0").revisions).default;
        "bytestring".revision = (((hackage."bytestring")."0.10.8.2").revisions).default;
        "aeson".revision = (((hackage."aeson")."1.4.7.1").revisions).default;
        "aeson".flags.cffi = false;
        "aeson".flags.fast = false;
        "aeson".flags.bytestring-builder = false;
        "aeson".flags.developer = false;
        "mono-traversable".revision = (((hackage."mono-traversable")."1.0.15.1").revisions).default;
        "ghci".revision = (((hackage."ghci")."8.6.5").revisions).default;
        "th-reify-many".revision = (((hackage."th-reify-many")."0.1.9").revisions).default;
        "syb".revision = (((hackage."syb")."0.7.2.1").revisions).default;
        "enclosed-exceptions".revision = (((hackage."enclosed-exceptions")."1.0.3").revisions).default;
        "zlib".revision = (((hackage."zlib")."0.6.2.3").revisions).default;
        "zlib".flags.non-blocking-ffi = false;
        "zlib".flags.pkg-config = false;
        "zlib".flags.bundled-c-zlib = false;
        "th-compat".revision = (((hackage."th-compat")."0.1.2").revisions).default;
        "data-default-instances-dlist".revision = (((hackage."data-default-instances-dlist")."0.0.1").revisions).default;
        "wai-websockets".revision = (((hackage."wai-websockets")."3.0.1.2").revisions).default;
        "wai-websockets".flags.example = true;
        "tagged".revision = (((hackage."tagged")."0.8.6.1").revisions).default;
        "tagged".flags.deepseq = true;
        "tagged".flags.transformers = true;
        "file-embed".revision = (((hackage."file-embed")."0.0.13.0").revisions).default;
        "deepseq".revision = (((hackage."deepseq")."1.4.4.0").revisions).default;
        "splitmix".revision = (((hackage."splitmix")."0.0.5").revisions).default;
        "splitmix".flags.random = true;
        "splitmix".flags.optimised-mixer = false;
        "unix".revision = (((hackage."unix")."2.7.2.2").revisions).default;
        "attoparsec".revision = (((hackage."attoparsec")."0.13.2.5").revisions).default;
        "attoparsec".flags.developer = false;
        "tar".revision = (((hackage."tar")."0.5.1.1").revisions).default;
        "tar".flags.old-time = false;
        "tar".flags.old-bytestring = false;
        "blaze-html".revision = (((hackage."blaze-html")."0.9.1.2").revisions).default;
        "filepath".revision = (((hackage."filepath")."1.4.2.1").revisions).default;
        "newtype-generics".revision = (((hackage."newtype-generics")."0.6").revisions).default;
        "ansi-terminal".revision = (((hackage."ansi-terminal")."0.9.1").revisions).default;
        "ansi-terminal".flags.example = false;
        "libyaml".revision = (((hackage."libyaml")."0.1.2").revisions).default;
        "libyaml".flags.no-unicode = false;
        "libyaml".flags.system-libyaml = false;
        "unliftio-core".revision = (((hackage."unliftio-core")."0.2.0.1").revisions).default;
        "th-lift".revision = (((hackage."th-lift")."0.8.2").revisions).default;
        "memory".revision = (((hackage."memory")."0.15.0").revisions).default;
        "memory".flags.support_basement = true;
        "memory".flags.support_bytestring = true;
        "memory".flags.support_deepseq = true;
        "memory".flags.support_foundation = true;
        "wai-extra".revision = (((hackage."wai-extra")."3.0.32").revisions).default;
        "wai-extra".flags.build-example = false;
        "blaze-builder".revision = (((hackage."blaze-builder")."0.4.2.1").revisions).default;
        "haskell-src-meta".revision = (((hackage."haskell-src-meta")."0.8.7").revisions).default;
        "SHA".revision = (((hackage."SHA")."1.6.4.4").revisions).default;
        "SHA".flags.exe = false;
        "stm".revision = (((hackage."stm")."2.5.0.0").revisions).default;
        "warp".revision = (((hackage."warp")."3.2.28").revisions).default;
        "warp".flags.network-bytestring = false;
        "warp".flags.allow-sendfilefd = true;
        "warp".flags.warp-debug = false;
        "fast-logger".revision = (((hackage."fast-logger")."3.0.3").revisions).default;
        "void".revision = (((hackage."void")."0.7.3").revisions).default;
        "void".flags.safe = false;
        "test-framework-hunit".revision = (((hackage."test-framework-hunit")."0.3.0.2").revisions).default;
        "test-framework-hunit".flags.base3 = false;
        "test-framework-hunit".flags.base4 = true;
        "MemoTrie".revision = (((hackage."MemoTrie")."0.6.10").revisions).default;
        "MemoTrie".flags.examples = false;
        "free".revision = (((hackage."free")."5.1.3").revisions).default;
        "integer-gmp".revision = (((hackage."integer-gmp")."1.0.2.0").revisions).default;
        "hashable".revision = (((hackage."hashable")."1.3.1.0").revisions).default;
        "hashable".flags.integer-gmp = true;
        "transformers-compat".revision = (((hackage."transformers-compat")."0.6.6").revisions).default;
        "transformers-compat".flags.two = false;
        "transformers-compat".flags.mtl = true;
        "transformers-compat".flags.five-three = true;
        "transformers-compat".flags.three = false;
        "transformers-compat".flags.four = false;
        "transformers-compat".flags.five = false;
        "transformers-compat".flags.generic-deriving = true;
        "semigroups".revision = (((hackage."semigroups")."0.19.1").revisions).default;
        "semigroups".flags.bytestring = true;
        "semigroups".flags.deepseq = true;
        "semigroups".flags.template-haskell = true;
        "semigroups".flags.binary = true;
        "semigroups".flags.bytestring-builder = false;
        "semigroups".flags.tagged = true;
        "semigroups".flags.containers = true;
        "semigroups".flags.transformers = true;
        "semigroups".flags.unordered-containers = true;
        "semigroups".flags.text = true;
        "semigroups".flags.hashable = true;
        "terminfo".revision = (((hackage."terminfo")."0.4.1.2").revisions).default;
        "websockets".revision = (((hackage."websockets")."0.12.7.2").revisions).default;
        "websockets".flags.example = false;
        "byteable".revision = (((hackage."byteable")."0.1.1").revisions).default;
        "vault".revision = (((hackage."vault")."0.3.1.5").revisions).default;
        "vault".flags.useghc = true;
        "data-default-instances-old-locale".revision = (((hackage."data-default-instances-old-locale")."0.0.1").revisions).default;
        "iproute".revision = (((hackage."iproute")."1.7.11").revisions).default;
        "test-framework".revision = (((hackage."test-framework")."0.8.2.0").revisions).default;
        "webdriver".revision = (((hackage."webdriver")."0.9.0.1").revisions).default;
        "webdriver".flags.network-uri = true;
        "webdriver".flags.developer = false;
        "ansi-wl-pprint".revision = (((hackage."ansi-wl-pprint")."0.6.9").revisions).default;
        "ansi-wl-pprint".flags.example = false;
        "scientific".revision = (((hackage."scientific")."0.3.6.2").revisions).default;
        "scientific".flags.bytestring-builder = false;
        "scientific".flags.integer-simple = false;
        "ghc-heap".revision = (((hackage."ghc-heap")."8.6.5").revisions).default;
        "executable-path".revision = (((hackage."executable-path")."0.0.3.1").revisions).default;
        "resourcet".revision = (((hackage."resourcet")."1.2.4.2").revisions).default;
        "binary".revision = (((hackage."binary")."0.8.6.0").revisions).default;
        "QuickCheck".revision = (((hackage."QuickCheck")."2.13.2").revisions).default;
        "QuickCheck".flags.templatehaskell = true;
        "uuid-types".revision = (((hackage."uuid-types")."1.0.4").revisions).default;
        "zip-archive".revision = (((hackage."zip-archive")."0.4.1").revisions).default;
        "zip-archive".flags.executable = false;
        "http-client".revision = (((hackage."http-client")."0.7.6").revisions).default;
        "http-client".flags.network-uri = true;
        "digest".revision = (((hackage."digest")."0.0.1.2").revisions).default;
        "digest".flags.bytestring-in-base = false;
        "auto-update".revision = (((hackage."auto-update")."0.1.6").revisions).default;
        "containers".revision = (((hackage."containers")."0.6.0.1").revisions).default;
        "http-date".revision = (((hackage."http-date")."0.0.11").revisions).default;
        "unix-compat".revision = (((hackage."unix-compat")."0.5.3").revisions).default;
        "unix-compat".flags.old-time = false;
        "case-insensitive".revision = (((hackage."case-insensitive")."1.2.1.0").revisions).default;
        "data-default".revision = (((hackage."data-default")."0.7.1.1").revisions).default;
        "type-equality".revision = (((hackage."type-equality")."1").revisions).default;
        "colour".revision = (((hackage."colour")."2.3.5").revisions).default;
        "StateVar".revision = (((hackage."StateVar")."1.2.1").revisions).default;
        };
      compiler = {
        version = "8.6.5";
        nix-name = "ghc865";
        packages = {
          "ghc-boot" = "8.6.5";
          "ghc-boot-th" = "8.6.5";
          "ghc-prim" = "0.5.3";
          "pretty" = "1.1.3.6";
          "text" = "1.2.3.1";
          "base" = "4.12.0.0";
          "time" = "1.8.0.2";
          "array" = "0.5.3.0";
          "process" = "1.6.5.0";
          "Cabal" = "2.4.0.1";
          "xhtml" = "3000.2.2.1";
          "hpc" = "0.6.0.3";
          "directory" = "1.3.3.0";
          "ghc-compact" = "0.1.0.0";
          "mtl" = "2.2.2";
          "transformers" = "0.5.6.2";
          "rts" = "1.0";
          "parsec" = "3.1.13.0";
          "template-haskell" = "2.14.0.0";
          "bytestring" = "0.10.8.2";
          "ghci" = "8.6.5";
          "deepseq" = "1.4.4.0";
          "unix" = "2.7.2.2";
          "filepath" = "1.4.2.1";
          "stm" = "2.5.0.0";
          "integer-gmp" = "1.0.2.0";
          "terminfo" = "0.4.1.2";
          "ghc-heap" = "8.6.5";
          "binary" = "0.8.6.0";
          "containers" = "0.6.0.1";
          };
        };
      };
  extras = hackage:
    {
      packages = {
        ghcjs = ./.plan.nix/ghcjs.nix;
        ghcjs-th = ./.plan.nix/ghcjs-th.nix;
        haddock-library-ghcjs = ./.plan.nix/haddock-library-ghcjs.nix;
        ghci-ghcjs = ./.plan.nix/ghci-ghcjs.nix;
        template-haskell-ghcjs = ./.plan.nix/template-haskell-ghcjs.nix;
        };
      };
  modules = [
    ({ lib, ... }:
      {
        packages = {
          "ghcjs" = {
            flags = {
              "use-host-template-haskell" = lib.mkOverride 900 true;
              "stage3" = lib.mkOverride 900 false;
              "ghci" = lib.mkOverride 900 true;
              "compiler-only" = lib.mkOverride 900 false;
              "stage2" = lib.mkOverride 900 true;
              "disable-optimizer" = lib.mkOverride 900 false;
              "stage1" = lib.mkOverride 900 false;
              "no-wrapper-install" = lib.mkOverride 900 false;
              "debug" = lib.mkOverride 900 false;
              "runtime-assertions" = lib.mkOverride 900 false;
              "terminfo" = lib.mkOverride 900 true;
              };
            };
          "ghcjs-th" = {
            flags = { "use-host-template-haskell" = lib.mkOverride 900 false; };
            };
          "haddock-library-ghcjs" = { flags = {}; };
          "ghci-ghcjs" = { flags = { "ghci" = lib.mkOverride 900 true; }; };
          "template-haskell-ghcjs" = { flags = {}; };
          };
        })
    ({ lib, ... }:
      {
        packages = {
          "base16-bytestring".components.library.planned = lib.mkOverride 900 true;
          "bytestring-builder".components.library.planned = lib.mkOverride 900 true;
          "vector-algorithms".components.library.planned = lib.mkOverride 900 true;
          "constraints".components.library.planned = lib.mkOverride 900 true;
          "data-default-instances-containers".components.library.planned = lib.mkOverride 900 true;
          "safe".components.library.planned = lib.mkOverride 900 true;
          "invariant".components.library.planned = lib.mkOverride 900 true;
          "transformers-base".components.library.planned = lib.mkOverride 900 true;
          "lifted-base".components.library.planned = lib.mkOverride 900 true;
          "blaze-builder".components.library.planned = lib.mkOverride 900 true;
          "shelly".components.library.planned = lib.mkOverride 900 true;
          "base-orphans".components.library.planned = lib.mkOverride 900 true;
          "setenv".components.library.planned = lib.mkOverride 900 true;
          "yaml".components.library.planned = lib.mkOverride 900 true;
          "unliftio-core".components.library.planned = lib.mkOverride 900 true;
          "haddock-library-ghcjs".components.library.planned = lib.mkOverride 900 true;
          "ghc-compact".components.library.planned = lib.mkOverride 900 true;
          "hspec-core".components.library.planned = lib.mkOverride 900 true;
          "ansi-terminal".components.library.planned = lib.mkOverride 900 true;
          "wl-pprint-text".components.library.planned = lib.mkOverride 900 true;
          "th-orphans".components.library.planned = lib.mkOverride 900 true;
          "indexed-traversable".components.library.planned = lib.mkOverride 900 true;
          "network-uri".components.library.planned = lib.mkOverride 900 true;
          "cookie".components.library.planned = lib.mkOverride 900 true;
          "wai-logger".components.setup.planned = lib.mkOverride 900 true;
          "regex-posix".components.library.planned = lib.mkOverride 900 true;
          "filepath".components.library.planned = lib.mkOverride 900 true;
          "contravariant".components.library.planned = lib.mkOverride 900 true;
          "enclosed-exceptions".components.library.planned = lib.mkOverride 900 true;
          "extensible-exceptions".components.library.planned = lib.mkOverride 900 true;
          "resourcet".components.library.planned = lib.mkOverride 900 true;
          "data-default-instances-old-locale".components.library.planned = lib.mkOverride 900 true;
          "appar".components.library.planned = lib.mkOverride 900 true;
          "haddock-library-ghcjs".components.tests."spec".planned = lib.mkOverride 900 true;
          "memory".components.library.planned = lib.mkOverride 900 true;
          "http2".components.library.planned = lib.mkOverride 900 true;
          "webdriver".components.library.planned = lib.mkOverride 900 true;
          "split".components.library.planned = lib.mkOverride 900 true;
          "base-compat-batteries".components.library.planned = lib.mkOverride 900 true;
          "haskell-src-meta".components.library.planned = lib.mkOverride 900 true;
          "ghcjs".components.exes."private-ghcjs-hsc2hs".planned = lib.mkOverride 900 true;
          "newtype-generics".components.library.planned = lib.mkOverride 900 true;
          "syb".components.library.planned = lib.mkOverride 900 true;
          "hspec".components.library.planned = lib.mkOverride 900 true;
          "ghcjs-th".components.library.planned = lib.mkOverride 900 true;
          "entropy".components.library.planned = lib.mkOverride 900 true;
          "pretty".components.library.planned = lib.mkOverride 900 true;
          "xhtml".components.library.planned = lib.mkOverride 900 true;
          "wai".components.library.planned = lib.mkOverride 900 true;
          "http-date".components.library.planned = lib.mkOverride 900 true;
          "haskell-src-exts".components.library.planned = lib.mkOverride 900 true;
          "process".components.library.planned = lib.mkOverride 900 true;
          "system-filepath".components.library.planned = lib.mkOverride 900 true;
          "Cabal".components.library.planned = lib.mkOverride 900 true;
          "distributive".components.library.planned = lib.mkOverride 900 true;
          "reflection".components.library.planned = lib.mkOverride 900 true;
          "hspec-discover".components.library.planned = lib.mkOverride 900 true;
          "mono-traversable".components.library.planned = lib.mkOverride 900 true;
          "tf-random".components.library.planned = lib.mkOverride 900 true;
          "zlib".components.library.planned = lib.mkOverride 900 true;
          "libyaml".components.library.planned = lib.mkOverride 900 true;
          "bytestring".components.library.planned = lib.mkOverride 900 true;
          "SHA".components.library.planned = lib.mkOverride 900 true;
          "clock".components.library.planned = lib.mkOverride 900 true;
          "template-haskell".components.library.planned = lib.mkOverride 900 true;
          "byteorder".components.library.planned = lib.mkOverride 900 true;
          "blaze-markup".components.library.planned = lib.mkOverride 900 true;
          "stm".components.library.planned = lib.mkOverride 900 true;
          "th-lift".components.library.planned = lib.mkOverride 900 true;
          "quickcheck-io".components.library.planned = lib.mkOverride 900 true;
          "ghci".components.library.planned = lib.mkOverride 900 true;
          "sop-core".components.library.planned = lib.mkOverride 900 true;
          "entropy".components.setup.planned = lib.mkOverride 900 true;
          "comonad".components.library.planned = lib.mkOverride 900 true;
          "system-filepath".components.setup.planned = lib.mkOverride 900 true;
          "xml".components.library.planned = lib.mkOverride 900 true;
          "profunctors".components.library.planned = lib.mkOverride 900 true;
          "ghcjs".components.exes."private-ghcjs-ghcjs".planned = lib.mkOverride 900 true;
          "lens".components.setup.planned = lib.mkOverride 900 true;
          "exceptions".components.library.planned = lib.mkOverride 900 true;
          "old-time".components.library.planned = lib.mkOverride 900 true;
          "zip-archive".components.library.planned = lib.mkOverride 900 true;
          "word8".components.library.planned = lib.mkOverride 900 true;
          "http-client".components.library.planned = lib.mkOverride 900 true;
          "generics-sop".components.library.planned = lib.mkOverride 900 true;
          "call-stack".components.library.planned = lib.mkOverride 900 true;
          "semigroupoids".components.setup.planned = lib.mkOverride 900 true;
          "async".components.library.planned = lib.mkOverride 900 true;
          "executable-path".components.library.planned = lib.mkOverride 900 true;
          "dlist".components.library.planned = lib.mkOverride 900 true;
          "ghc-prim".components.library.planned = lib.mkOverride 900 true;
          "ghcjs".components.exes."private-ghcjs-haddock".planned = lib.mkOverride 900 true;
          "ghcjs".components.exes."private-ghcjs-ghcjs-pkg".planned = lib.mkOverride 900 true;
          "HUnit".components.library.planned = lib.mkOverride 900 true;
          "cabal-doctest".components.library.planned = lib.mkOverride 900 true;
          "ghc-boot".components.library.planned = lib.mkOverride 900 true;
          "cryptohash".components.library.planned = lib.mkOverride 900 true;
          "time-manager".components.library.planned = lib.mkOverride 900 true;
          "iproute".components.library.planned = lib.mkOverride 900 true;
          "haddock-library-ghcjs".components.tests."fixtures".planned = lib.mkOverride 900 true;
          "lens".components.library.planned = lib.mkOverride 900 true;
          "wai-logger".components.library.planned = lib.mkOverride 900 true;
          "hpc".components.library.planned = lib.mkOverride 900 true;
          "directory-tree".components.library.planned = lib.mkOverride 900 true;
          "array".components.library.planned = lib.mkOverride 900 true;
          "th-compat".components.library.planned = lib.mkOverride 900 true;
          "http-types".components.library.planned = lib.mkOverride 900 true;
          "ghcjs".components.exes."private-ghcjs-unlit".planned = lib.mkOverride 900 true;
          "scientific".components.library.planned = lib.mkOverride 900 true;
          "semigroupoids".components.library.planned = lib.mkOverride 900 true;
          "binary".components.library.planned = lib.mkOverride 900 true;
          "QuickCheck".components.library.planned = lib.mkOverride 900 true;
          "charset".components.library.planned = lib.mkOverride 900 true;
          "ghcjs".components.exes."private-ghcjs-ghcjs-dumparchive".planned = lib.mkOverride 900 true;
          "ghc-heap".components.library.planned = lib.mkOverride 900 true;
          "wai-extra".components.library.planned = lib.mkOverride 900 true;
          "ghc-boot-th".components.library.planned = lib.mkOverride 900 true;
          "ansi-wl-pprint".components.library.planned = lib.mkOverride 900 true;
          "uuid-types".components.library.planned = lib.mkOverride 900 true;
          "test-framework".components.library.planned = lib.mkOverride 900 true;
          "blaze-html".components.library.planned = lib.mkOverride 900 true;
          "file-embed".components.library.planned = lib.mkOverride 900 true;
          "ghcjs".components.exes."ghcjs-boot".planned = lib.mkOverride 900 true;
          "tagged".components.library.planned = lib.mkOverride 900 true;
          "wai-app-static".components.exes."warp".planned = lib.mkOverride 900 true;
          "wai-websockets".components.library.planned = lib.mkOverride 900 true;
          "hspec-discover".components.exes."hspec-discover".planned = lib.mkOverride 900 true;
          "splitmix".components.library.planned = lib.mkOverride 900 true;
          "simple-sendfile".components.library.planned = lib.mkOverride 900 true;
          "mtl".components.library.planned = lib.mkOverride 900 true;
          "rts".components.library.planned = lib.mkOverride 900 true;
          "ghcjs".components.setup.planned = lib.mkOverride 900 true;
          "attoparsec".components.library.planned = lib.mkOverride 900 true;
          "temporary".components.library.planned = lib.mkOverride 900 true;
          "unix".components.library.planned = lib.mkOverride 900 true;
          "data-default-instances-dlist".components.library.planned = lib.mkOverride 900 true;
          "hsc2hs".components.exes."hsc2hs".planned = lib.mkOverride 900 true;
          "template-haskell-ghcjs".components.library.planned = lib.mkOverride 900 true;
          "ghci-ghcjs".components.library.planned = lib.mkOverride 900 true;
          "cryptonite".components.library.planned = lib.mkOverride 900 true;
          "haddock-library".components.library.planned = lib.mkOverride 900 true;
          "parsers".components.library.planned = lib.mkOverride 900 true;
          "regex-base".components.library.planned = lib.mkOverride 900 true;
          "adjunctions".components.library.planned = lib.mkOverride 900 true;
          "tree-diff".components.library.planned = lib.mkOverride 900 true;
          "data-default-class".components.library.planned = lib.mkOverride 900 true;
          "vault".components.library.planned = lib.mkOverride 900 true;
          "th-abstraction".components.library.planned = lib.mkOverride 900 true;
          "parallel".components.library.planned = lib.mkOverride 900 true;
          "wai-websockets".components.exes."wai-websockets-example".planned = lib.mkOverride 900 true;
          "happy".components.setup.planned = lib.mkOverride 900 true;
          "vector".components.library.planned = lib.mkOverride 900 true;
          "ghcjs".components.exes."private-ghcjs-run".planned = lib.mkOverride 900 true;
          "transformers".components.library.planned = lib.mkOverride 900 true;
          "parsec".components.library.planned = lib.mkOverride 900 true;
          "deepseq".components.library.planned = lib.mkOverride 900 true;
          "wai-app-static".components.library.planned = lib.mkOverride 900 true;
          "type-equality".components.library.planned = lib.mkOverride 900 true;
          "directory".components.library.planned = lib.mkOverride 900 true;
          "primitive".components.library.planned = lib.mkOverride 900 true;
          "ghcjs".components.library.planned = lib.mkOverride 900 true;
          "tar".components.library.planned = lib.mkOverride 900 true;
          "network-byte-order".components.library.planned = lib.mkOverride 900 true;
          "happy".components.exes."happy".planned = lib.mkOverride 900 true;
          "mime-types".components.library.planned = lib.mkOverride 900 true;
          "old-locale".components.library.planned = lib.mkOverride 900 true;
          "th-lift-instances".components.library.planned = lib.mkOverride 900 true;
          "bifunctors".components.library.planned = lib.mkOverride 900 true;
          "ghcjs".components.tests."test".planned = lib.mkOverride 900 true;
          "lifted-async".components.library.planned = lib.mkOverride 900 true;
          "kan-extensions".components.library.planned = lib.mkOverride 900 true;
          "bsb-http-chunked".components.library.planned = lib.mkOverride 900 true;
          "conduit".components.library.planned = lib.mkOverride 900 true;
          "unordered-containers".components.library.planned = lib.mkOverride 900 true;
          "random".components.library.planned = lib.mkOverride 900 true;
          "system-fileio".components.library.planned = lib.mkOverride 900 true;
          "text".components.library.planned = lib.mkOverride 900 true;
          "base".components.library.planned = lib.mkOverride 900 true;
          "psqueues".components.library.planned = lib.mkOverride 900 true;
          "network".components.library.planned = lib.mkOverride 900 true;
          "time".components.library.planned = lib.mkOverride 900 true;
          "integer-logarithms".components.library.planned = lib.mkOverride 900 true;
          "ghc-paths".components.library.planned = lib.mkOverride 900 true;
          "fast-logger".components.library.planned = lib.mkOverride 900 true;
          "data-default".components.library.planned = lib.mkOverride 900 true;
          "transformers-compat".components.library.planned = lib.mkOverride 900 true;
          "integer-gmp".components.library.planned = lib.mkOverride 900 true;
          "streaming-commons".components.library.planned = lib.mkOverride 900 true;
          "StateVar".components.library.planned = lib.mkOverride 900 true;
          "case-insensitive".components.library.planned = lib.mkOverride 900 true;
          "colour".components.library.planned = lib.mkOverride 900 true;
          "digest".components.library.planned = lib.mkOverride 900 true;
          "monad-control".components.library.planned = lib.mkOverride 900 true;
          "containers".components.library.planned = lib.mkOverride 900 true;
          "aeson".components.library.planned = lib.mkOverride 900 true;
          "hspec-expectations".components.library.planned = lib.mkOverride 900 true;
          "basement".components.library.planned = lib.mkOverride 900 true;
          "th-reify-many".components.library.planned = lib.mkOverride 900 true;
          "th-expand-syns".components.library.planned = lib.mkOverride 900 true;
          "base-compat".components.library.planned = lib.mkOverride 900 true;
          "time-compat".components.library.planned = lib.mkOverride 900 true;
          "hostname".components.library.planned = lib.mkOverride 900 true;
          "optparse-applicative".components.library.planned = lib.mkOverride 900 true;
          "unix-time".components.library.planned = lib.mkOverride 900 true;
          "stringsearch".components.library.planned = lib.mkOverride 900 true;
          "ghc-paths".components.setup.planned = lib.mkOverride 900 true;
          "free".components.library.planned = lib.mkOverride 900 true;
          "auto-update".components.library.planned = lib.mkOverride 900 true;
          "base64-bytestring".components.library.planned = lib.mkOverride 900 true;
          "warp".components.library.planned = lib.mkOverride 900 true;
          "unix-compat".components.library.planned = lib.mkOverride 900 true;
          "hashable".components.library.planned = lib.mkOverride 900 true;
          "MemoTrie".components.library.planned = lib.mkOverride 900 true;
          "websockets".components.library.planned = lib.mkOverride 900 true;
          "void".components.library.planned = lib.mkOverride 900 true;
          "byteable".components.library.planned = lib.mkOverride 900 true;
          "semigroups".components.library.planned = lib.mkOverride 900 true;
          "easy-file".components.library.planned = lib.mkOverride 900 true;
          "test-framework-hunit".components.library.planned = lib.mkOverride 900 true;
          "terminfo".components.library.planned = lib.mkOverride 900 true;
          };
        })
    ];
  }