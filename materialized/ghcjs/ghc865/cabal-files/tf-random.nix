{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  ({
    flags = {};
    package = {
      specVersion = "1.8";
      identifier = { name = "tf-random"; version = "0.5"; };
      license = "BSD-3-Clause";
      copyright = "";
      maintainer = "Michał Pałka <michal.palka@chalmers.se>";
      author = "Michał Pałka <michal.palka@chalmers.se>";
      homepage = "";
      url = "";
      synopsis = "High-quality splittable pseudorandom number generator";
      description = "This package contains an implementation of a high-quality splittable pseudorandom number generator. The generator is based on a cryptographic hash function built on top of the ThreeFish block cipher. See the paper /Splittable Pseudorandom Number Generators Using Cryptographic Hashing/ by Claessen, Pałka for details and the rationale of the design.\n\nThe package provides the following:\n\n* A splittable PRNG that implements the standard 'System.Random.RandomGen' class.\n\n* The generator also implements an alternative version of the 'System.Random.TF.Gen.RandomGen' class (exported from \"System.Random.TF.Gen\"), which requires the generator to return pseudorandom integers from the full 32-bit range, and contains an n-way split function.\n\n* An alternative version of the @Random@ class is provided, which is linked to the new @RandomGen@ class, together with @Random@ instances for some integral types.\n\n* Two functions for initialising the generator with a non-deterministic seed: one using the system time, and one using the @\\/dev\\/urandom@ UNIX special file.\n\nThe package uses an adapted version of the reference C implementation of ThreeFish from the reference package of the Skein hash function (<https://www.schneier.com/skein.html>), originally written by Doug Whiting.\n\nPlease note that even though the generator provides very high-quality pseudorandom numbers, it has not been designed with cryptographic applications in mind.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs."base" or (errorHandler.buildDepError "base"))
          (hsPkgs."primitive" or (errorHandler.buildDepError "primitive"))
          (hsPkgs."random" or (errorHandler.buildDepError "random"))
          (hsPkgs."time" or (errorHandler.buildDepError "time"))
          ];
        buildable = true;
        };
      };
    } // {
    src = (pkgs.lib).mkDefault (pkgs.fetchurl {
      url = "http://hackage.haskell.org/package/tf-random-0.5.tar.gz";
      sha256 = "2e30cec027b313c9e1794d326635d8fc5f79b6bf6e7580ab4b00186dadc88510";
      });
    }) // {
    package-description-override = "-- Initial tf-random.cabal generated by cabal init.  For further\n-- documentation, see http://haskell.org/cabal/users-guide/\n\n-- The name of the package.\nname:                tf-random\n\n-- The package version.  See the Haskell package versioning policy (PVP)\n-- for standards guiding when and how versions should be incremented.\n-- http://www.haskell.org/haskellwiki/Package_versioning_policy\n-- PVP summary:      +-+------- breaking API changes\n--                   | | +----- non-breaking API additions\n--                   | | | +--- code changes with no API change\nversion:             0.5\n\n-- A short (one-line) description of the package.\nsynopsis:            High-quality splittable pseudorandom number generator\n\n-- A longer description of the package.\ndescription:         This package contains an implementation of a high-quality splittable pseudorandom number generator. The generator is based on a cryptographic hash function built on top of the ThreeFish block cipher. See the paper /Splittable Pseudorandom Number Generators Using Cryptographic Hashing/ by Claessen, Pałka for details and the rationale of the design.\n                     .\n                     The package provides the following:\n                     .\n                       * A splittable PRNG that implements the standard 'System.Random.RandomGen' class.\n                     .\n                       * The generator also implements an alternative version of the 'System.Random.TF.Gen.RandomGen' class (exported from \"System.Random.TF.Gen\"), which requires the generator to return pseudorandom integers from the full 32-bit range, and contains an n-way split function.\n                     .\n                       * An alternative version of the @Random@ class is provided, which is linked to the new @RandomGen@ class, together with @Random@ instances for some integral types.\n                     .\n                       * Two functions for initialising the generator with a non-deterministic seed: one using the system time, and one using the @\\/dev\\/urandom@ UNIX special file.\n                     .\n                     The package uses an adapted version of the reference C implementation of ThreeFish from the reference package of the Skein hash function (<https://www.schneier.com/skein.html>), originally written by Doug Whiting.\n                     .\n                     Please note that even though the generator provides very high-quality pseudorandom numbers, it has not been designed with cryptographic applications in mind.\n\n-- URL for the project homepage or repository.\n--homepage:            http://no.home.page/\n\n-- The license under which the package is released.\nlicense:             BSD3\n\n-- The file containing the license text.\nlicense-file:        LICENSE\n\n-- The package author(s).\nauthor:              Michał Pałka <michal.palka@chalmers.se>\n\n-- An email address to which users can send suggestions, bug reports, and\n-- patches.\nmaintainer:          Michał Pałka <michal.palka@chalmers.se>\n\n-- A copyright notice.\n-- copyright:           \n\ncategory:            Random\n\nbuild-type:          Simple\n\n-- Constraint on the version of Cabal needed to build this package.\ncabal-version:       >=1.8\n\nextra-source-files:\n  ChangeLog,\n  LICENSE.brg,\n  LICENSE.tf,\n  cbits/brg_types.h,\n  cbits/skein_debug.c,\n  cbits/skein_debug.h,\n  cbits/threefish.h,\n  cbits/threefish_port.h\n\nsource-repository head\n  type:              darcs\n  location:          http://hub.darcs.net/michal.palka/tf-random\n\nlibrary\n  Hs-Source-Dirs: src\n  C-Sources:\n    cbits/threefish_block.c\n\n  --GHC-options: -O\n\n  -- Modules exported by the library.\n  exposed-modules:     System.Random.TF, System.Random.TF.Gen, System.Random.TF.Init, System.Random.TF.Instances\n\n  -- Modules included in this library but not exported.\n  -- other-modules:       \n\n  -- Other library packages from which modules are imported.\n  build-depends:\n    base >= 4.2 && < 5,\n    primitive >= 0.3,\n    random,\n    time\n\n";
    }