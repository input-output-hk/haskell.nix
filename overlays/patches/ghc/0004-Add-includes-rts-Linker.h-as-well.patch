From b163dcbeddf70a6952445e8c1fe4324f1052cdd9 Mon Sep 17 00:00:00 2001
From: Moritz Angermann <moritz.angermann@gmail.com>
Date: Thu, 20 Jun 2024 02:38:50 +0000
Subject: [PATCH 04/12] Add includes/rts/Linker.h as well.

---
 includes/rts/Linker.h | 16 +++++++++++++++-
 1 file changed, 15 insertions(+), 1 deletion(-)

diff --git a/includes/rts/Linker.h b/includes/rts/Linker.h
index 06c9402..ae463bc 100644
--- a/includes/rts/Linker.h
+++ b/includes/rts/Linker.h
@@ -41,7 +41,7 @@ void initLinker (void);
  */
 void initLinker_ (int retain_cafs);
 
-/* insert a symbol in the hash table */
+/* insert a code symbol in the hash table */
 HsInt insertSymbol(pathchar* obj_name, char* key, void* data);
 
 /* lookup a symbol in the hash table */
@@ -52,6 +52,7 @@ typedef enum {
     OBJECT_LOADED,
     OBJECT_NEEDED,
     OBJECT_RESOLVED,
+    OBJECT_READY,
     OBJECT_UNLOADED,
     OBJECT_DONT_RESOLVE,
     OBJECT_NOT_LOADED     /* The object was either never loaded or has been
@@ -76,6 +77,19 @@ HsInt loadArchive( pathchar *path );
 /* resolve all the currently unlinked objects in memory */
 HsInt resolveObjs( void );
 
+/* Load an .so using the system linker.
+   Returns a handle that can be passed to dlsym() or NULL on error.
+
+   In the case of error, stores the error message in errmsg. The caller
+   is responsible for freeing it. */
+void *loadNativeObj( pathchar *path, char **errmsg );
+
+/* Mark the .so loaded with the system linker for unloading.
+   The RTS will unload it when all the references to the .so disappear from
+   the heap.
+   Takes the handle returned from loadNativeObj() as an argument. */
+HsInt unloadNativeObj( void *handle );
+
 /* load a dynamic library */
 const char *addDLL( pathchar* dll_name );
 
-- 
2.33.0

