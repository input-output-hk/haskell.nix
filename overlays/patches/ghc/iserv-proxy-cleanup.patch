diff --git a/configure.ac b/configure.ac
index 846924727d..0e67c1051a 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1334,7 +1334,7 @@ checkMake380() {
 checkMake380 make
 checkMake380 gmake
 
-AC_CONFIG_FILES([mk/config.mk mk/install.mk mk/project.mk rts/rts.cabal compiler/ghc.cabal ghc/ghc-bin.cabal utils/runghc/runghc.cabal utils/gen-dll/gen-dll.cabal libraries/ghc-boot/ghc-boot.cabal libraries/ghc-boot-th/ghc-boot-th.cabal libraries/ghci/ghci.cabal libraries/ghc-heap/ghc-heap.cabal settings docs/users_guide/ghc_config.py docs/index.html libraries/prologue.txt distrib/configure.ac])
+AC_CONFIG_FILES([mk/config.mk mk/install.mk mk/project.mk rts/rts.cabal compiler/ghc.cabal ghc/ghc-bin.cabal utils/iserv/iserv.cabal utils/iserv-proxy/iserv-proxy.cabal utils/remote-iserv/remote-iserv.cabal utils/runghc/runghc.cabal utils/gen-dll/gen-dll.cabal libraries/ghc-boot/ghc-boot.cabal libraries/ghc-boot-th/ghc-boot-th.cabal libraries/ghci/ghci.cabal libraries/ghc-heap/ghc-heap.cabal libraries/libiserv/libiserv.cabal settings docs/users_guide/ghc_config.py docs/index.html libraries/prologue.txt distrib/configure.ac])
 AC_OUTPUT
 [
 if test "$print_make_warning" = "true"; then
diff --git a/libraries/libiserv/libiserv.cabal.in b/libraries/libiserv/libiserv.cabal.in
new file mode 100644
index 0000000000..31eaaeb838
--- /dev/null
+++ b/libraries/libiserv/libiserv.cabal.in
@@ -0,0 +1,43 @@
+-- WARNING: libiserv.cabal is automatically generated from libiserv.cabal.in by
+-- ../../configure.  Make sure you are editing libiserv.cabal.in, not
+-- libiserv.cabal.
+
+Name: libiserv
+Version: @ProjectVersionMunged@
+Copyright: XXX
+License: BSD3
+License-File: LICENSE
+Author: XXX
+Maintainer: XXX
+Synopsis: Provides shared functionality between iserv and iserv-proxy
+Description:
+Category: Development
+build-type: Simple
+cabal-version: >=1.10
+
+Flag network
+    Description:   Build libiserv with over-the-network support
+    Default:       False
+
+Library
+    Default-Language: Haskell2010
+    Hs-Source-Dirs: src
+    Exposed-Modules: Lib
+                   , GHCi.Utils
+    Build-Depends: base       >= 4   && < 5,
+                   binary     >= 0.7 && < 0.11,
+                   bytestring >= 0.10 && < 0.11,
+                   containers >= 0.5 && < 0.7,
+                   deepseq    >= 1.4 && < 1.5,
+                   ghci       == @ProjectVersionMunged@
+    if flag(network)
+       Exposed-Modules: Remote.Message
+                      , Remote.Slave
+       Build-Depends: network    >= 2.6 && < 2.7,
+                      directory  >= 1.3 && < 1.4,
+                      filepath   >= 1.4 && < 1.5
+
+    if os(windows)
+       Cpp-Options: -DWINDOWS
+   else
+       Build-Depends: unix   >= 2.7 && < 2.9
diff --git a/utils/iserv-proxy/iserv-proxy.cabal b/utils/iserv-proxy/iserv-proxy.cabal
deleted file mode 100644
index 5d276b244d..0000000000
--- a/utils/iserv-proxy/iserv-proxy.cabal
+++ /dev/null
@@ -1,78 +0,0 @@
-Name: iserv-proxy
-Version: 8.6
-Copyright: XXX
-License: BSD3
--- XXX License-File: LICENSE
-Author: XXX
-Maintainer: XXX
-Synopsis: iserv allows GHC to delegate Tempalte Haskell computations
-Description:
-  GHC can be provided with a path to the iserv binary with
-  @-pgmi=/path/to/iserv-bin@, and will in combination with
-  @-fexternal-interpreter@, compile Template Haskell though the
-  @iserv-bin@ delegate. This is very similar to how ghcjs has been
-  compiling Template Haskell, by spawning a separate delegate (so
-  called runner on the javascript vm) and evaluating the splices
-  there.
-  .
-  iserv can also be used in combination with cross compilation. For
-  this, the @iserv-proxy@ needs to be built on the host, targeting the
-  host (as it is running on the host). @cabal install -flibrary
-  -fproxy@ will yield the proxy.
-  .
-  Using the cabal for the target @arch-platform-target-cabal install
-  -flibrary@ will build the required library that contains the ffi
-  @startSlave@ function, which needs to be invoked on the target
-  (e.g. in an iOS application) to start the remote iserv slave.
-  .
-  calling the GHC cross compiler with @-fexternal-interpreter
-  -pgmi=$HOME/.cabal/bin/iserv-proxy -opti\<ip address\> -opti\<port\>@
-  will cause it to compile Template Haskell via the remote at \<ip address\>.
-  .
-  Thus to get cross compilation with Template Haskell follow the
-  following receipt:
-  .
-  * compile the iserv library for your target
-  .
-      > iserv $ arch-platform-target-cabal install -flibrary
-  .
-  * setup an application for your target that calls the
-  * startSlave function. This could be either haskell or your
-  * targets ffi capable language, if needed.
-  .
-      >  void startSlave(false /* verbose */, 5000 /* port */,
-      >                  "/path/to/storagelocation/on/target");
-  .
-  * build the iserv-proxy
-  .
-      > iserv $ cabal install -flibrary -fproxy
-  * Start your iserv-slave app on your target running on say @10.0.0.1:5000@
-  * compiler your sources with -fexternal-interpreter and the proxy
-  .
-      > project $ arch-platform-target-ghc ModuleContainingTH.hs \
-      >             -fexternal-interpreter \
-      >             -pgmi=$HOME/.cabal/bin/iserv-proxy \
-      >             -opti10.0.0.1 -opti5000
-  .
-  Should something not work as expected, provide @-opti-v@ for verbose
-  logging of the @iserv-proxy@.
-
-Category: Development
-build-type: Simple
-cabal-version: >=1.10
-
-Executable iserv-proxy
-   Default-Language: Haskell2010
-   Main-Is: Main.hs
-   Hs-Source-Dirs: src
-   Build-Depends: array      >= 0.5 && < 0.6,
-                  base       >= 4   && < 5,
-                  binary     >= 0.7 && < 0.9,
-                  bytestring >= 0.10 && < 0.11,
-                  containers >= 0.5 && < 0.6,
-                  deepseq    >= 1.4 && < 1.5,
-                  directory  >= 1.3 && < 1.4,
-                  network    >= 2.6,
-                  filepath   >= 1.4 && < 1.5,
-                  ghci       == 8.6.*,
-                  libiserv   == 8.6.*
diff --git a/utils/iserv-proxy/iserv-proxy.cabal.in b/utils/iserv-proxy/iserv-proxy.cabal.in
new file mode 100644
index 0000000000..0819064601
--- /dev/null
+++ b/utils/iserv-proxy/iserv-proxy.cabal.in
@@ -0,0 +1,82 @@
+-- WARNING: iserv-proxy.cabal is automatically generated from iserv-proxy.cabal.in by
+-- ../../configure.  Make sure you are editing iserv-proxy.cabal.in, not
+-- iserv-proxy.cabal.
+
+Name: iserv-proxy
+Version: @ProjectVersion@
+Copyright: XXX
+License: BSD3
+-- XXX License-File: LICENSE
+Author: XXX
+Maintainer: XXX
+Synopsis: iserv allows GHC to delegate Tempalte Haskell computations
+Description:
+  GHC can be provided with a path to the iserv binary with
+  @-pgmi=/path/to/iserv-bin@, and will in combination with
+  @-fexternal-interpreter@, compile Template Haskell though the
+  @iserv-bin@ delegate. This is very similar to how ghcjs has been
+  compiling Template Haskell, by spawning a separate delegate (so
+  called runner on the javascript vm) and evaluating the splices
+  there.
+  .
+  iserv can also be used in combination with cross compilation. For
+  this, the @iserv-proxy@ needs to be built on the host, targeting the
+  host (as it is running on the host). @cabal install -flibrary
+  -fproxy@ will yield the proxy.
+  .
+  Using the cabal for the target @arch-platform-target-cabal install
+  -flibrary@ will build the required library that contains the ffi
+  @startSlave@ function, which needs to be invoked on the target
+  (e.g. in an iOS application) to start the remote iserv slave.
+  .
+  calling the GHC cross compiler with @-fexternal-interpreter
+  -pgmi=$HOME/.cabal/bin/iserv-proxy -opti\<ip address\> -opti\<port\>@
+  will cause it to compile Template Haskell via the remote at \<ip address\>.
+  .
+  Thus to get cross compilation with Template Haskell follow the
+  following receipt:
+  .
+  * compile the iserv library for your target
+  .
+      > iserv $ arch-platform-target-cabal install -flibrary
+  .
+  * setup an application for your target that calls the
+  * startSlave function. This could be either haskell or your
+  * targets ffi capable language, if needed.
+  .
+      >  void startSlave(false /* verbose */, 5000 /* port */,
+      >                  "/path/to/storagelocation/on/target");
+  .
+  * build the iserv-proxy
+  .
+      > iserv $ cabal install -flibrary -fproxy
+  * Start your iserv-slave app on your target running on say @10.0.0.1:5000@
+  * compiler your sources with -fexternal-interpreter and the proxy
+  .
+      > project $ arch-platform-target-ghc ModuleContainingTH.hs \
+      >             -fexternal-interpreter \
+      >             -pgmi=$HOME/.cabal/bin/iserv-proxy \
+      >             -opti10.0.0.1 -opti5000
+  .
+  Should something not work as expected, provide @-opti-v@ for verbose
+  logging of the @iserv-proxy@.
+
+Category: Development
+build-type: Simple
+cabal-version: >=1.10
+
+Executable iserv-proxy
+   Default-Language: Haskell2010
+   Main-Is: Main.hs
+   Hs-Source-Dirs: src
+   Build-Depends: array      >= 0.5 && < 0.6,
+                  base       >= 4   && < 5,
+                  binary     >= 0.7 && < 0.9,
+                  bytestring >= 0.10 && < 0.11,
+                  containers >= 0.5 && < 0.6,
+                  deepseq    >= 1.4 && < 1.5,
+                  directory  >= 1.3 && < 1.4,
+                  network    >= 2.6,
+                  filepath   >= 1.4 && < 1.5,
+                  ghci       == @ProjectVersionMunged@,
+                  libiserv   == @ProjectVersionMunged@
diff --git a/utils/iserv/iserv.cabal.in b/utils/iserv/iserv.cabal.in
new file mode 100644
index 0000000000..356c8a444a
--- /dev/null
+++ b/utils/iserv/iserv.cabal.in
@@ -0,0 +1,48 @@
+-- WARNING: iserv.cabal is automatically generated from iserv.cabal.in by
+-- ../../configure.  Make sure you are editing iserv.cabal.in, not
+-- iserv.cabal.
+
+Name: iserv
+Version: @ProjectVersion@
+Copyright: XXX
+License: BSD3
+-- XXX License-File: LICENSE
+Author: XXX
+Maintainer: XXX
+Synopsis: iserv allows GHC to delegate Template Haskell computations
+Description:
+  GHC can be provided with a path to the iserv binary with
+  @-pgmi=/path/to/iserv-bin@, and will in combination with
+  @-fexternal-interpreter@, compile Template Haskell though the
+  @iserv-bin@ delegate. This is very similar to how ghcjs has been
+  compiling Template Haskell, by spawning a separate delegate (so
+  called runner on the javascript vm) and evaluating the splices
+  there.
+  .
+  To use iserv with cross compilers, please see @libraries/libiserv@
+  and @utils/iserv-proxy@.
+
+Category: Development
+build-type: Simple
+cabal-version: >=1.10
+
+Executable iserv
+    Default-Language: Haskell2010
+    ghc-options: -no-hs-main
+    Main-Is: Main.hs
+    C-Sources: cbits/iservmain.c
+    Hs-Source-Dirs: src
+    include-dirs: .
+    Build-Depends: array      >= 0.5 && < 0.6,
+                   base       >= 4   && < 5,
+                   binary     >= 0.7 && < 0.11,
+                   bytestring >= 0.10 && < 0.11,
+                   containers >= 0.5 && < 0.7,
+                   deepseq    >= 1.4 && < 1.5,
+                   ghci       == @ProjectVersionMunged@,
+                   libiserv   == @ProjectVersionMunged@
+
+    if os(windows)
+        Cpp-Options: -DWINDOWS
+    else
+        Build-Depends: unix   >= 2.7 && < 2.9
