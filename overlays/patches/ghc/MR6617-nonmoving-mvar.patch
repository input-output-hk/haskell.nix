From 2bcb79d44adbc07095f5e1506b7f918dc348ef40 Mon Sep 17 00:00:00 2001
From: Ben Gamari <ben@smart-cactus.org>
Date: Thu, 30 Sep 2021 15:52:59 +0000
Subject: [PATCH 1/2] rts: Unify stack dirtiness check

This fixes an inconsistency where one dirtiness check would not mask out
the STACK_DIRTY flag, meaning it may also be affected by the STACK_SANE
flag.

(cherry picked from commit 23f11efb9a59f99a1d4c7e4cd1955259fcaeb549)
---
 includes/Cmm.h  |   6 +-
 rts/PrimOps.cmm | 247 ++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 242 insertions(+), 11 deletions(-)

diff --git a/includes/Cmm.h b/includes/Cmm.h
index e53ed4b227..789461a9f4 100644
--- a/includes/Cmm.h
+++ b/includes/Cmm.h
@@ -633,6 +633,9 @@
 #define OVERWRITING_CLOSURE_OFS(c,n) /* nothing */
 #endif
 
+#define IS_STACK_CLEAN(stack) \
+    ((TO_W_(StgStack_dirty(stack)) & STACK_DIRTY) == 0)
+
 // Memory barriers.
 // For discussion of how these are used to fence heap object
 // accesses see Note [Heap memory barriers] in SMP.h.
@@ -773,9 +776,6 @@
       __gen = TO_W_(bdescr_gen_no(__bd));                       \
       if (__gen > 0) { recordMutableCap(__p, __gen); }
 
-/* -----------------------------------------------------------------------------
-   Update remembered set write barrier
-   -------------------------------------------------------------------------- */
 
 /* -----------------------------------------------------------------------------
    Arrays
diff --git a/rts/PrimOps.cmm b/rts/PrimOps.cmm
index e97187fe29..3c948f94a7 100644
--- a/rts/PrimOps.cmm
+++ b/rts/PrimOps.cmm
@@ -1852,15 +1852,14 @@ loop:
     // actually perform the takeMVar
     W_ stack;
     stack = StgTSO_stackobj(tso);
+    if (IS_STACK_CLEAN(stack)) {
+        ccall dirty_STACK(MyCapability() "ptr", stack "ptr");
+    }
     PerformTake(stack, val);
 
     // indicate that the MVar operation has now completed.
     StgTSO__link(tso) = stg_END_TSO_QUEUE_closure;
 
-    if ((TO_W_(StgStack_dirty(stack)) & STACK_DIRTY) == 0) {
-        ccall dirty_STACK(MyCapability() "ptr", stack "ptr");
-    }
-
     ccall tryWakeupThread(MyCapability() "ptr", tso);
 
     // If it was a readMVar, then we can still do work,
@@ -1943,15 +1942,14 @@ loop:
     // actually perform the takeMVar
     W_ stack;
     stack = StgTSO_stackobj(tso);
+    if (IS_STACK_CLEAN(stack)) {
+        ccall dirty_STACK(MyCapability() "ptr", stack "ptr");
+    }
     PerformTake(stack, val);
 
     // indicate that the MVar operation has now completed.
     StgTSO__link(tso) = stg_END_TSO_QUEUE_closure;
 
-    if ((TO_W_(StgStack_dirty(stack)) & STACK_DIRTY) == 0) {
-        ccall dirty_STACK(MyCapability() "ptr", stack "ptr");
-    }
-
     ccall tryWakeupThread(MyCapability() "ptr", tso);
 
     // If it was a readMVar, then we can still do work,
-- 
2.33.1


From a3a5b05ef182f8b641e82c190445ae893e1d7384 Mon Sep 17 00:00:00 2001
From: Ben Gamari <ben@well-typed.com>
Date: Tue, 28 Sep 2021 20:53:26 +0000
Subject: [PATCH 2/2] rts: Add missing write barriers in MVar wake-up paths

Previously PerformPut failed to respect the non-moving collector's
snapshot invariant, hiding references to an MVar and its new value by
overwriting a stack frame without dirtying the stack. Fix this.

PerformTake exhibited a similar bug, failing to dirty (and therefore
mark) the blocked stack before mutating it.

Closes #20399.

(cherry picked from commit 801978bdfbe635a76e474ea32fd3da83b59325d1)
---
 rts/PrimOps.cmm    | 24 ++++++++++++++++++++++++
 rts/sm/NonMoving.c |  4 ++++
 2 files changed, 28 insertions(+)

diff --git a/rts/PrimOps.cmm b/rts/PrimOps.cmm
index 3c948f94a7..116d6d0520 100644
--- a/rts/PrimOps.cmm
+++ b/rts/PrimOps.cmm
@@ -1545,6 +1545,23 @@ stg_writeTVarzh (P_ tvar,     /* :: TVar a */
  * exception and never perform its take or put, and we'd end up with a
  * deadlock.
  *
+ * Note [Nonmoving write barrier in Perform{Take,Put}]
+ * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ * As noted in Note [Non-moving garbage collector] in NonMoving.c, the
+ * non-moving GC requires that all overwritten pointers be pushed to the update
+ * remembered set. In the case of stack mutation this typically happens by
+ * "dirtying" the stack, which eagerly traces the entire stack chunk.
+ *
+ * An exception to this rule is PerformPut, which mutates the stack of a
+ * blocked thread (overwriting an stg_block_putmvar frame). To ensure that the
+ * collector sees the MVar and value reachable from the overwritten frame, we
+ * must push them to the update remembered set. Failing to do so was the cause
+ * of #20399.
+ *
+ * Note that unlike PerformPut, the callers of PerformTake first dirty the
+ * stack prior mutating it (since they introduce a *new*, potentially
+ * inter-generational reference to the stack) and therefore the barrier
+ * described above is unnecessary in this case.
  * -------------------------------------------------------------------------- */
 
 stg_isEmptyMVarzh ( P_ mvar /* :: MVar a */ )
@@ -1573,15 +1590,22 @@ stg_newMVarzh ()
 }
 
 
+// See Note [Nonmoving write barrier in Perform{Put,Take}].
+// Precondition: the stack must be dirtied.
 #define PerformTake(stack, value)               \
     W_ sp;                                      \
     sp = StgStack_sp(stack);                    \
     W_[sp + WDS(1)] = value;                    \
     W_[sp + WDS(0)] = stg_ret_p_info;
 
+// See Note [Nonmoving write barrier in Perform{Put,Take}].
 #define PerformPut(stack,lval)                  \
     W_ sp;                                      \
     sp = StgStack_sp(stack) + WDS(3);           \
+    IF_NONMOVING_WRITE_BARRIER_ENABLED {        \
+      ccall updateRemembSetPushClosure_(BaseReg "ptr", W_[sp - WDS(1)] "ptr"); \
+      ccall updateRemembSetPushClosure_(BaseReg "ptr", W_[sp - WDS(2)] "ptr"); \
+    }                                           \
     StgStack_sp(stack) = sp;                    \
     lval = W_[sp - WDS(1)];
 
diff --git a/rts/sm/NonMoving.c b/rts/sm/NonMoving.c
index 99fd9c1ece..5971cbac20 100644
--- a/rts/sm/NonMoving.c
+++ b/rts/sm/NonMoving.c
@@ -229,6 +229,10 @@ Mutex concurrent_coll_finished_lock;
  *  - Note [StgStack dirtiness flags and concurrent marking] (TSO.h) describes
  *    the protocol for concurrent marking of stacks.
  *
+ *  - Note [Nonmoving write barrier in Perform{Take,Put}] (PrimOps.cmm) describes
+ *    a tricky barrier necessary when resuming threads blocked on MVar
+ *    operations.
+ *
  *  - Note [Static objects under the nonmoving collector] (Storage.c) describes
  *    treatment of static objects.
  *
-- 
2.33.1

