diff --git a/rts/RtsSymbols.c b/rts/RtsSymbols.c
index edb9385..fb43eec 100644
--- a/rts/RtsSymbols.c
+++ b/rts/RtsSymbols.c
@@ -1025,6 +1025,17 @@
 #define RTS_LINKER_SYMBOLS
 #endif
 
+#if !defined(DYNAMIC)
+#define RTS_STACK_PROTECTOR_SYMBOLS \
+      SymI_NeedsProto(__stack_chk_fail) \
+      SymI_HasProto_redirect(__stack_chk_fail_local, __stack_chk_fail, true)
+#define RTS_LIBC_SYMBOLS \
+      SymI_NeedsProto(abort)
+#else
+#define RTS_STACK_PROTECTOR_SYMBOLS
+#define RTS_LIBC_SYMBOLS
+#endif
+
 /* entirely bogus claims about types of these symbols */
 #define SymI_NeedsProto(vvv)  extern void vvv(void);
 #define SymI_NeedsDataProto(vvv)  extern StgWord vvv[];
@@ -1054,6 +1065,8 @@ RTS_OPENBSD_ONLY_SYMBOLS
 RTS_LIBGCC_SYMBOLS
 RTS_LIBFFI_SYMBOLS
 RTS_LINKER_SYMBOLS
+RTS_STACK_PROTECTOR_SYMBOLS
+RTS_LIBC_SYMBOLS
 #undef SymI_NeedsProto
 #undef SymI_NeedsDataProto
 #undef SymI_HasProto
@@ -1107,6 +1120,8 @@ RtsSymbolVal rtsSyms[] = {
       RTS_LIBGCC_SYMBOLS
       RTS_LIBFFI_SYMBOLS
       RTS_LINKER_SYMBOLS
+      RTS_STACK_PROTECTOR_SYMBOLS
+      RTS_LIBC_SYMBOLS
       SymI_HasDataProto(nonmoving_write_barrier_enabled)
 #if defined(darwin_HOST_OS) && defined(i386_HOST_ARCH)
       // dyld stub code contains references to this,
@@ -1114,6 +1129,8 @@ RtsSymbolVal rtsSyms[] = {
       // lazy pointers as nonlazy.
       { "dyld_stub_binding_helper", (void*)0xDEADBEEF, false },
 #endif
+      { "__loader_add_thread_local_dtor", (void*)(&RTS_DYNAMIC), false },
+      { "__loader_remove_thread_local_dtor", (void*)(&RTS_DYNAMIC), false },
       { "_DYNAMIC", (void*)(&RTS_DYNAMIC), false },
       { 0, 0, false } /* sentinel */
 };
diff --git a/rts/linker/Elf.c b/rts/linker/Elf.c
index fdfe87a..24b15c3 100644
--- a/rts/linker/Elf.c
+++ b/rts/linker/Elf.c
@@ -925,7 +925,9 @@ ocGetNames_ELF ( ObjectCode* oc )
                            || ELF_ST_BIND(symbol->elf_sym->st_info) == STB_WEAK
                                                                   )
                           /* and not an undefined symbol */
-                          && shndx != SHN_UNDEF
+                          && (shndx != SHN_UNDEF
+                             /* unless it's weak */
+                             || (shndx == SHN_UNDEF && ELF_ST_BIND(symbol->elf_sym->st_info) == STB_WEAK))
                           /* and not in a "special section" */
                           && (shndx < SHN_LORESERVE
 #if defined(SHN_XINDEX)
@@ -948,10 +950,15 @@ ocGetNames_ELF ( ObjectCode* oc )
                                       stab[j].st_size, stab[j].st_value, nm);
                    }
                    */
-                   symbol->addr = (SymbolAddr*)(
-                           (intptr_t) oc->sections[secno].start +
-                           (intptr_t) symbol->elf_sym->st_value);
-                   ASSERT(symbol->addr != 0x0);
+
+                   if(ELF_ST_BIND(symbol->elf_sym->st_info) == STB_WEAK && shndx == SHN_UNDEF) {
+                        symbol->addr = NULL;
+                   } else {
+                        symbol->addr = (SymbolAddr*)(
+                                (intptr_t) oc->sections[secno].start +
+                                (intptr_t) symbol->elf_sym->st_value);
+                        ASSERT(symbol->addr != 0x0);
+                   }
                    if (ELF_ST_BIND(symbol->elf_sym->st_info) == STB_LOCAL) {
                        isLocal = true;
                        isWeak = false;
@@ -967,7 +974,7 @@ ocGetNames_ELF ( ObjectCode* oc )
 
                /* And the decision is ... */
 
-               if (symbol->addr != NULL) {
+               if (symbol->addr != NULL || (ELF_ST_BIND(symbol->elf_sym->st_info) == STB_WEAK && shndx == SHN_UNDEF)) {
                    ASSERT(nm != NULL);
                    /* Acquire! */
                    if (!isLocal) {
