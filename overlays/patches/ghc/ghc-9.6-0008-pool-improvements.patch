diff --git a/rts/linker/Elf.c b/rts/linker/Elf.c
index 96b93ba..fca17ff 100644
--- a/rts/linker/Elf.c
+++ b/rts/linker/Elf.c
@@ -137,10 +137,12 @@ void * __pool = NULL;
 void * __pool_rw_offset = NULL;
 void * __pool_rx_offset = NULL;

+#define POOL_SIZE 512
+
 void memPoolProtect( void ) {
     if(__pool != NULL) {
-        mprotect(__pool, 256*1024*1024, PROT_READ | PROT_WRITE);
-        mprotect((void*)((uintptr_t)__pool + 256*1024*1024), 256*1024*1024, PROT_READ | PROT_WRITE | PROT_EXEC);
+        mprotect(__pool, (POOL_SIZE>>2)*1024*1024, PROT_READ | PROT_WRITE);
+        mprotect((void*)((uintptr_t)__pool + (POOL_SIZE>>2)*1024*1024), (POOL_SIZE-(POOL_SIZE>>2))*1024*1024, PROT_READ | PROT_WRITE | PROT_EXEC);
     }
 }

@@ -150,8 +152,8 @@ StgWord poolAlign(StgWord align, StgWord size) {

 void * printPoolInfo( void ) {
     printf("Pool size: %ldM\n", ((uintptr_t)__pool_rx_offset - (uintptr_t)__pool_rw_offset)/(1024*1024));
-    printf("RW: %p -- %p\n", __pool_rw_offset, (void*)((uintptr_t)__pool + 256*1024*1024));
-    printf("RX: %p -- %p\n", (void*)((uintptr_t)__pool + 256*1024*1024), __pool_rx_offset);
+    printf("RW: %p -- %p; %ldM\n", __pool_rw_offset, (void*)((uintptr_t)__pool + (POOL_SIZE>>2)*1024*1024), (((uintptr_t)__pool + (POOL_SIZE>>2)*1024*1024) - (uintptr_t)__pool_rw_offset)/(1024*1024));
+    printf("RX: %p -- %p; %ldM\n", (void*)((uintptr_t)__pool + (POOL_SIZE>>2)*1024*1024), __pool_rx_offset, ((uintptr_t)__pool_rx_offset - ((uintptr_t)__pool + (POOL_SIZE>>2)*1024*1024))/(1024*1024));
     fflush(stdout);
     return NULL;
 }
@@ -160,13 +162,13 @@ void * memPoolAlloc(SectionKind kind, StgWord align, StgWord size) {
     ASSERT(0x0 == (size & align));
     if(__pool == NULL) {
         // allocate 1 GB of virtual memory.
-        __pool = mmapAnonForLinker(512*1024*1024);
+        __pool = mmapAnonForLinker(POOL_SIZE*1024*1024);
         if(__pool == NULL) {
             printf("Failed to allocate memory pool\n");
             fflush(stdout);
             return NULL;
         }
-        __pool_rw_offset = (void*)((uintptr_t)__pool + 256*1024*1024);
+        __pool_rw_offset = (void*)((uintptr_t)__pool + (POOL_SIZE>>2)*1024*1024);
         __pool_rx_offset = __pool_rw_offset;
     }
     // align to 64 bytes
@@ -177,8 +179,9 @@ void * memPoolAlloc(SectionKind kind, StgWord align, StgWord size) {
         ret = __pool_rx_offset;
         // printf("Allocated RX %p\n", ret);
         __pool_rx_offset = (void*)((uintptr_t)__pool_rx_offset + alignedSize);
-        if((uintptr_t)__pool_rx_offset > (uintptr_t)__pool + 512*1024*1024) {
-            printf("Out of memory pool\n");
+        if((uintptr_t)__pool_rx_offset > (uintptr_t)__pool + POOL_SIZE*1024*1024) {
+            printf("Out of memory pool, for RX, trying to allocate %ld\n", alignedSize);
+            printPoolInfo();
             fflush(stdout);
             return NULL;
         }
@@ -187,7 +190,8 @@ void * memPoolAlloc(SectionKind kind, StgWord align, StgWord size) {
         ret = __pool_rw_offset;
         // printf("Allocated RW %p\n", ret);
         if((uintptr_t)__pool_rw_offset < (uintptr_t)__pool) {
-            printf("Out of memory pool\n");
+            printf("Out of memory pool, for RW, trying to allocate %ld\n", alignedSize);
+            printPoolInfo();
             fflush(stdout);
             return NULL;
         }
@@ -876,7 +880,7 @@ ocGetNames_ELF ( ObjectCode* oc )
                * address might be out of range for sections that are mmaped.
                */
               alloc = SECTION_POOL;
-              start = memPoolAlloc(kind, 0x3f, poolAlign(0x3f, size));
+              start = memPoolAlloc(kind, 0xf, poolAlign(0xf, size));
               // mmapAnonForLinker(size);
               if (start == NULL) {
                 barf("failed to mmap memory for bss. "
@@ -884,7 +888,7 @@ ocGetNames_ELF ( ObjectCode* oc )
               }
               mapped_start = start;
               mapped_offset = 0;
-              mapped_size = poolAlign(0x3f, size);
+              mapped_size = poolAlign(0xf, size);
           }
           CHECK(start != 0x0);
 #else
@@ -921,7 +925,7 @@ ocGetNames_ELF ( ObjectCode* oc )
            * break up the section itself.
            */
           unsigned stub_align = 0x7;
-          unsigned section_align = 0x3f;
+          unsigned section_align = 0xf;

           unsigned nstubs = numberOfStubsForSection(oc, i);
           unsigned stub_space = poolAlign(stub_align, STUB_SIZE * nstubs);
@@ -1035,7 +1039,7 @@ ocGetNames_ELF ( ObjectCode* oc )
       void * common_mem = NULL;
       if(common_size > 0) {
           common_mem = // mmapAnonForLinker(common_size);
-              memPoolAlloc(SECTIONKIND_RWDATA, 0x3f, poolAlign(0x3f,common_size));
+              memPoolAlloc(SECTIONKIND_RWDATA, 0xf, poolAlign(0xf,common_size));
           if (common_mem == NULL) {
             barf("ocGetNames_ELF: Failed to allocate memory for SHN_COMMONs");
           }
