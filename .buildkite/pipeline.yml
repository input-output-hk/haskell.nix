steps:
  - label: 'Run tests with ghc8107: Running the nix-build tests...'
    command: "./test/tests.sh ghc8107 nix-build"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Running the unit tests...'
    command: "./test/tests.sh ghc8107 unit-tests"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking that a nix-shell works for runghc...'
    command: "./test/tests.sh ghc8107 runghc"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking that a nix-shell works for cabal...'
    command: "./test/tests.sh ghc8107 cabal"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking that a nix-shell works for cabal (doExactConfig component)...'
    command: "./test/tests.sh ghc8107 cabal-doExactConfig"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking that a nix-shell works for a project with test-suite build-tools and benchmarks...'
    command: "./test/tests.sh ghc8107 tests-benchmarks"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking that a nix-shell works for a multi-target project...'
    command: "./test/tests.sh ghc8107 multi-target"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking shellFor works for a cabal project, multiple packages...'
    command: "./test/tests.sh ghc8107 shellFor-single-package"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking shellFor works for a cabal project, single package...y'
    command: "./test/tests.sh ghc8107 shellFor-multiple-package"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking shellFor works for a cabal project, single package...'
    command: "./test/tests.sh ghc8107 shellFor-hoogle"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking shellFor does not depend on given packages...y'
    command: "./test/tests.sh ghc8107 shellFor-not-depends"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking the maintainer scripts...y'
    command: "./test/tests.sh ghc8107 maintainer-scripts"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking that plan construction works with extra Hackages...'
    command: "./test/tests.sh ghc8107 plan-extra-hackages"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: Checking that package with extra Hackages can be build...'
    command: "./test/tests.sh ghc8107 build-extra-hackages"
    agents:
      system: x86_64-linux

  - label: 'Run tests with ghc8107: End-2-end test of hix project initialization and flakes development shell ...'
    command: "./test/tests.sh ghc8107 hix"
    agents:
      system: x86_64-linux

  - label: 'Check that jobset will evaluate in Hydra at ifdLevel 0 and 1'
    command:
      - nix-build build.nix -A maintainer-scripts.check-hydra -o check-hydra.sh
      - ./check-hydra.sh --arg ifdLevel 0
      - ./check-hydra.sh --arg ifdLevel 1
    agents:
      system: x86_64-linux

  - label: 'Check that jobset will evaluate in Hydra at ifdLevel 2'
    command:
      - nix-build build.nix -A maintainer-scripts.check-hydra -o check-hydra.sh
      - ./check-hydra.sh --arg ifdLevel 2
    agents:
      system: x86_64-linux

  - label: 'Check that jobset will evaluate in Hydra at ifdLevel 3 and ghc 8.10'
    command:
      - nix-build build.nix -A maintainer-scripts.check-hydra -o check-hydra.sh
      - "./check-hydra.sh --arg ifdLevel 3 --arg include 'x: __substring 0 6 x == \"ghc810\"'"
    agents:
      system: x86_64-linux

  - label: 'Check that jobset will evaluate in Hydra at ifdLevel 3 and ghc 9.2'
    command:
      - nix-build build.nix -A maintainer-scripts.check-hydra -o check-hydra.sh
      - "./check-hydra.sh --arg ifdLevel 3 --arg include 'x: __substring 0 5 x == \"ghc92\"'"
    agents:
      system: x86_64-linux

  - label: 'Check that jobset will evaluate in Hydra at ifdLevel 3 and not (ghc 8.10 or ghc 9.2)'
    command:
      - nix-build build.nix -A maintainer-scripts.check-hydra -o check-hydra.sh
      - "./check-hydra.sh --arg ifdLevel 3 --arg include 'x: !(__substring 0 6 x == \"ghc810\" || __substring 0 5 x == \"ghc92\")'"
    agents:
      system: x86_64-linux

  - label: 'Check closure size with ghc8107'
    command:
      - nix-build build.nix -A maintainer-scripts.check-closure-size --argstr compiler-nix-name ghc8107 -o check-closure-size.sh
      - echo "+++ Closure size (MB)"
      - ./check-closure-size.sh
    agents:
      system: x86_64-linux

  - label: 'Update docs'
    command:
      - nix-build build.nix -A maintainer-scripts.update-docs -o update-docs.sh
      - ./update-docs.sh
    agents:
      system: x86_64-linux

  - label: 'Make sure materialize function does not limit concurrency'
    command:
      - nix-build build.nix -A maintainer-scripts.check-materialization-concurrency -o check-materialization-concurrency.sh
      - ./check-materialization-concurrency.sh

  - label: 'Make sure non store paths like can be used as src'
    command:
      - nix-build build.nix -A maintainer-scripts.check-path-support --argstr compiler-nix-name ghc8107 -o check-path-support.sh
      - ./check-path-support.sh

  - label: 'Check that the haskell.nix roots do not require IFDs'
    command:
      - nix build .#roots.x86_64-linux --accept-flake-config --option allow-import-from-derivation false
    agents:
      system: x86_64-linux

  - label: 'Check that evaluation of hydra jobs works without using remote builders'
    command:
      - nix-instantiate release.nix -A required-unstable-ghc8107-x86_64-darwin-native --show-trace --builders ''
    agents:
      system: x86_64-linux

  - label: 'Check hix -- run github:haskell/cabal/3.8#cabal-install:exe:cabal -- --version'
    command:
      - "HIX_DIR=$(mktemp -d) nix run .#hix --accept-flake-config -- run github:haskell/cabal/3.8#cabal-install:exe:cabal --accept-flake-config --override-input haskellNix . -- --version"
    agents:
      system: x86_64-linux

